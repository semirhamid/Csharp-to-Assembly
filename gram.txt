compilation-unit:
        class-declarations-opt
        statement-list
semi-opt:
        ";"
        empty
class-declarations-opt:
        class-declarations
        empty
class-declarations:
        class-declaration
        class-declarations class-declaration
class-declaration:
        "class" identifier class-base-opt class-body semi-opt
class-base-opt:
        class-base
        empty
class-base:
        ":" class-type
class-type:
        identifier
class-body:
        "{" class-member-declarations-opt "}"
class-member-declarations-opt:
        class-member-declarations
        empty
class-member-declarations:
        class-member-declaration
        class-member-declarations class-member-declaration
class-member-declaration:
        constant-declaration
        field-declaration
        method-declaration
        constructor-declaration
        destructor-declaration
constant-declaration:
        modifier "const" simple-type constant-declarators ";"
        "const" simple-type constant-declarators ";"
type:
        simple-type
        class-type
        array-type
simple-type:
        "bool"
        "int"
        "uint"
        "char"
        "double"
array-type:
        simple-type "[" "]"
constant-declarators:
        constant-declarator
        constant-declarators "," constant-declarator
constant-declarator:
        identifier "=" expression
expression:
        conditional-expression
        assignment
conditional-expression:
        conditional-or-expression
        conditional-or-expression "?" expression ":" expression
conditional-or-expression:
        conditional-and-expression
        conditional-or-expression "||" conditional-and-expression
conditional-and-expression:
        inclusive-or-expression
        conditional-and-expression "&&" inclusive-or-expression
inclusive-or-expression:
        exclusive-or-expression
        inclusive-or-expression "|" exclusive-or-expression
exclusive-or-expression:
        and-expression
        exclusive-or-expression "^" and-expression
and-expression:
        equality-expression
        and-expression "&" equality-expression
equality-expression:
        relational-expression
        equality-expression "==" relational-expression
        equality-expression "!=" relational-expression
relational-expression:
        shift-expression
        relational-expression "<" shift-expression
        relational-expression ">" shift-expression
        relational-expression "<=" shift-expression
        relational-expression ">=" shift-expression
shift-expression:
        additive-expression
        shift-expression "<<" additive-expression
        shift-expression ">>" additive-expression
additive-expression:
        multiplicative-expression
        additive-expression "+" multiplicative-expression
        additive-expression "-" multiplicative-expression
multiplicative-expression:
        unary-expression
        multiplicative-expression "*" unary-expression
        multiplicative-expression "/" unary-expression
        multiplicative-expression "%" unary-expression
unary-expression:
        primary-expression
        "+" unary-expression
        "-" unary-expression
        "!" unary-expression
        "~" unary-expression
        "*" unary-expression
        pre-increment-expression
        pre-decrement-expression
primary-expression:
        array-creation-expression
        primary-no-array-creation-expression
array-creation-expression:
        "new" simple-type "[" expression-list "]" array-initializer-opt
array-initializer-opt:
        array-initializer
        empty
expression-list:
        expression
        expression-list "," expression
array-initializer:
        "{" variable-initializer-list-opt "}"
variable-initializer-list-opt:
        expression-list
        empty
variable-initializer:
        expression
        array-initializer
primary-no-array-creation-expression:
        literal
        identifier
        parenthesized-expression
        member-access
        invocation-expression
        element-access
        post-increment-expression
        post-decrement-expression
        object-creation-expression
parenthesized-expression:
        "(" expression ")"
member-access:
        prim-expression "." identifier
invocation-expression:
        identifier "(" argument-list-opt ")"
        member-access "(" argument-list-opt ")"
argument-list-opt:
        argument-list
        empty
argument-list:
        argument
        argument-list "," argument
argument:
        expression
        "out" variable-reference
variable-reference:
        expression
element-access:
        identifier "[" expression-list "]"
        member-access "[" expression-list "]"
prim-expression:
        identifier
        member-access
        element-access
post-increment-expression:
        prim-expression "++"
post-decrement-expression:
        prim-expression "--"
object-creation-expression:
        "new" type "(" argument-list-opt ")"
pre-increment-expression:
        "++" prim-expression
pre-decrement-expression:
        "--" prim-expression
assignment:
        prim-expression assignment-operator expression
assignment-operator:
        "="
        "+="
        "-="
        "*="
        "/="
        "%="
        "&="
        "|="
        "^="
        "<<="
        ">>="
field-declaration:
        modifier type variable-declarators ";"
        type variable-declarators ";"
modifier:
        "public"
        "private"
variable-declarators:
        variable-declarator
        variable-declarators "," variable-declarator
variable-declarator:
        identifier
        identifier "=" variable-initializer
method-declaration:
        method-header method-body
method-header:
        modifier type member-name "(" formal-parameter-list-opt ")"
        modifier "void" member-name "(" formal-parameter-list-opt ")"
        type member-name "(" formal-parameter-list-opt ")"
        "void" member-name "(" formal-parameter-list-opt ")"
formal-parameter-list-opt:
        formal-parameter-list
        empty
member-name:
        identifier
formal-parameter-list:
        fixed-parameters
fixed-parameters:
        fixed-parameter
        fixed-parameters "," fixed-parameter
fixed-parameter:
        parameter-modifier-opt type identifier
parameter-modifier-opt:
        parameter-modifier
        empty
parameter-modifier:
        "out"
method-body:
        block
        ";"
block:
        "{" statement-list-opt "}"
statement-list-opt:
        statement-list
        empty
statement-list:
        statement
        statement-list statement
statement:
        labeled-statement
        declaration-statement
        block
        empty-statement
        expression-statement
        selection-statement
        iteration-statement
        jump-statement
        write-statement
        read-statement
write-statement:
        CONSOLE "." WRITELINE "(" print-list ")"
print-list:
        expression
        expression "," print-list
        empty
read-statement:
        CONSOLE "." READLINE "(" identifier ")"
labeled-statement:
        identifier ":" statement
declaration-statement:
        local-variable-declaration ";"
        local-constant-declaration ";"
local-variable-declaration:
        type variable-declarators
local-constant-declaration:
        "const" type constant-declarators
empty-statement:
        ";"
expression-statement:
        statement-expression ";"
statement-expression:
        invocation-expression
        object-creation-expression
        assignment
        post-increment-expression
        post-decrement-expression
        pre-increment-expression
        pre-decrement-expression
selection-statement:
        if-statement
        switch-statement
if-statement:
        "if" "(" expression ")" block
        "if" "(" expression ")" block "else" block
switch-statement:
        "switch" "(" expression ")" switch-block
switch-block:
        "{" switch-sections-opt "}"
switch-sections-opt:
        switch-sections
        empty
switch-sections:
        switch-section
        switch-sections switch-section
switch-section:
        switch-labels statement-list
switch-labels:
        switch-label
        switch-labels switch-label
switch-label:
        "case" expression ":"
        "default" ":"
iteration-statement:
        while-statement
        for-statement
        foreach-statement
        do-statement
while-statement:
        "while" "(" expression ")" block
do-statement:
        "do" block "while" "(" expression ")" ";"
for-statement:
        "for" "(" for-initializer-opt ";" for-condition-opt ";" for-iterator-opt ")" block
for-initializer-opt:
        for-initializer
        empty
for-initializer:
        local-variable-declaration
        statement-expression-list
for-condition-opt:
        for-condition
        empty
for-condition:
        expression
for-iterator-opt:
        for-iterator
        empty
for-iterator:
        statement-expression-list
statement-expression-list:
        statement-expression
        statement-expression-list "," statement-expression
foreach-statement:
        "foreach" "(" type identifier "in" expression ")" block
jump-statement:
        break-statement
        continue-statement
        goto-statement
        return-statement
break-statement:
        "break" ";"
continue-statement:
        "continue" ";"
goto-statement:
        "goto" identifier ";"
return-statement:
        "return" expression-opt ";"
expression-opt:
        expression
        empty
constructor-declaration:
        constructor-declarator constructor-body
constructor-declarator:
        identifier "(" formal-parameter-list-opt ")" 
constructor-body:
        block
        ";"
destructor-declaration:
        "~" identifier "(" ")" destructor-body
destructor-body:
        block
        ";"
literal:
    ICONST
    UICONST
    LICONST
    ULICONST
    FCONST
    DCONST
    MCONST
    CCONST
    SCONST
    VSCONST
    "true"
    "false"
