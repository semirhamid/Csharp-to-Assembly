Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    GOTO

Grammar

Rule 0     S' -> compilation-unit
Rule 1     compilation-unit -> class-declarations-opt
Rule 2     semi-opt -> DELIM
Rule 3     semi-opt -> empty
Rule 4     class-declarations-opt -> class-declarations
Rule 5     class-declarations-opt -> empty
Rule 6     class-declarations -> class-declaration
Rule 7     class-declarations -> class-declarations class-declaration
Rule 8     class-declaration -> class-header class-body semi-opt
Rule 9     class-header -> CLASS IDENTIFIER COLON class-type
Rule 10    class-header -> CLASS IDENTIFIER
Rule 11    class-type -> IDENTIFIER
Rule 12    class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END
Rule 13    class-member-declarations-opt -> class-member-declarations
Rule 14    class-member-declarations-opt -> empty
Rule 15    class-member-declarations -> class-member-declaration
Rule 16    class-member-declarations -> class-member-declarations class-member-declaration
Rule 17    class-member-declaration -> constant-declaration
Rule 18    class-member-declaration -> field-declaration
Rule 19    class-member-declaration -> method-declaration
Rule 20    constant-declaration -> CONST simple-type constant-declarators DELIM
Rule 21    constant-declaration -> modifier CONST simple-type constant-declarators DELIM
Rule 22    type -> simple-type
Rule 23    type -> class-type
Rule 24    type -> array-type
Rule 25    simple-type -> BOOL
Rule 26    simple-type -> INT
Rule 27    simple-type -> CHAR
Rule 28    simple-type -> STRING
Rule 29    array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
Rule 30    constant-declarators -> constant-declarator
Rule 31    constant-declarators -> constant-declarators COMMA constant-declarator
Rule 32    constant-declarator -> IDENTIFIER ASSIGN expression
Rule 33    expression -> conditional-expression
Rule 34    expression -> assignment
Rule 35    conditional-expression -> conditional-or-expression
Rule 36    conditional-expression -> conditional-or-expression CONDOP expression COLON expression
Rule 37    conditional-or-expression -> conditional-and-expression
Rule 38    conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression
Rule 39    M_or -> empty
Rule 40    M_and -> empty
Rule 41    conditional-and-expression -> inclusive-or-expression
Rule 42    conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression
Rule 43    inclusive-or-expression -> exclusive-or-expression
Rule 44    inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression
Rule 45    exclusive-or-expression -> and-expression
Rule 46    exclusive-or-expression -> exclusive-or-expression BITXOR and-expression
Rule 47    and-expression -> equality-expression
Rule 48    and-expression -> and-expression BITAND equality-expression
Rule 49    equality-expression -> relational-expression
Rule 50    equality-expression -> equality-expression EQ relational-expression
Rule 51    equality-expression -> equality-expression NE relational-expression
Rule 52    relational-expression -> shift-expression
Rule 53    relational-expression -> relational-expression LT shift-expression
Rule 54    relational-expression -> relational-expression GT shift-expression
Rule 55    relational-expression -> relational-expression LE shift-expression
Rule 56    relational-expression -> relational-expression GE shift-expression
Rule 57    shift-expression -> additive-expression
Rule 58    shift-expression -> shift-expression LSHIFT additive-expression
Rule 59    shift-expression -> shift-expression RSHIFT additive-expression
Rule 60    additive-expression -> multiplicative-expression
Rule 61    additive-expression -> additive-expression PLUS multiplicative-expression
Rule 62    additive-expression -> additive-expression MINUS multiplicative-expression
Rule 63    multiplicative-expression -> unary-expression
Rule 64    multiplicative-expression -> multiplicative-expression TIMES unary-expression
Rule 65    multiplicative-expression -> multiplicative-expression DIV unary-expression
Rule 66    multiplicative-expression -> multiplicative-expression MOD unary-expression
Rule 67    unary-expression -> primary-expression
Rule 68    unary-expression -> PLUS unary-expression
Rule 69    unary-expression -> MINUS unary-expression
Rule 70    unary-expression -> BITNOT unary-expression
Rule 71    unary-expression -> BITCOMP unary-expression
Rule 72    primary-expression -> primary-no-array-creation-expression
Rule 73    expression-list -> expression
Rule 74    expression-list -> expression-list COMMA expression
Rule 75    array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
Rule 76    variable-initializer-list-opt -> expression-list
Rule 77    variable-initializer-list-opt -> empty
Rule 78    variable-initializer -> expression
Rule 79    variable-initializer -> array-initializer
Rule 80    primary-no-array-creation-expression -> literal
Rule 81    primary-no-array-creation-expression -> IDENTIFIER
Rule 82    primary-no-array-creation-expression -> element-access
Rule 83    primary-no-array-creation-expression -> parenthesized-expression
Rule 84    primary-no-array-creation-expression -> member-access
Rule 85    primary-no-array-creation-expression -> invocation-expression
Rule 86    primary-no-array-creation-expression -> object-creation-expression
Rule 87    object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 88    parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 89    member-access -> IDENTIFIER DOT IDENTIFIER
Rule 90    invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 91    invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
Rule 92    argument-list-opt -> expression-list
Rule 93    argument-list-opt -> empty
Rule 94    element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
Rule 95    element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET
Rule 96    assignment -> IDENTIFIER assignment-operator expression
Rule 97    assignment -> member-access assignment-operator expression
Rule 98    assignment -> element-access assignment-operator expression
Rule 99    assignment-operator -> ASSIGN
Rule 100   assignment-operator -> PLUSEQUAL
Rule 101   assignment-operator -> MINUSEQUAL
Rule 102   assignment-operator -> TIMESEQUAL
Rule 103   assignment-operator -> DIVEQUAL
Rule 104   assignment-operator -> MODEQUAL
Rule 105   assignment-operator -> BITANDEQUAL
Rule 106   assignment-operator -> BITOREQUAL
Rule 107   assignment-operator -> BITXOREQUAL
Rule 108   assignment-operator -> LSHIFTEQUAL
Rule 109   assignment-operator -> RSHIFTEQUAL
Rule 110   field-declaration -> modifier type variable-declarators DELIM
Rule 111   field-declaration -> type variable-declarators DELIM
Rule 112   modifier -> PUBLIC
Rule 113   modifier -> PRIVATE
Rule 114   variable-declarators -> variable-declarator
Rule 115   variable-declarators -> variable-declarators COMMA variable-declarator
Rule 116   variable-declarator -> IDENTIFIER
Rule 117   variable-declarator -> IDENTIFIER ASSIGN variable-initializer
Rule 118   method-declaration -> method-header method-body
Rule 119   method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 120   method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
Rule 121   formal-parameter-list-opt -> formal-parameter-list
Rule 122   formal-parameter-list-opt -> empty
Rule 123   formal-parameter-list -> fixed-parameters
Rule 124   fixed-parameters -> fixed-parameter
Rule 125   fixed-parameters -> fixed-parameters COMMA fixed-parameter
Rule 126   fixed-parameter -> type IDENTIFIER
Rule 127   method-body -> method-block
Rule 128   method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END
Rule 129   block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
Rule 130   M_bstart -> empty
Rule 131   statement-list-opt -> statement-list
Rule 132   statement-list-opt -> empty
Rule 133   statement-list -> statement
Rule 134   statement-list -> statement-list statement
Rule 135   statement -> labeled-statement
Rule 136   statement -> declaration-statement
Rule 137   statement -> block
Rule 138   statement -> empty-statement
Rule 139   statement -> expression-statement
Rule 140   statement -> selection-statement
Rule 141   statement -> iteration-statement
Rule 142   statement -> jump-statement
Rule 143   statement -> write-statement
Rule 144   statement -> read-statement
Rule 145   statement -> method-declaration
Rule 146   write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
Rule 147   print-list -> expression
Rule 148   print-list -> expression COMMA print-list
Rule 149   read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
Rule 150   labeled-statement -> IDENTIFIER COLON statement
Rule 151   declaration-statement -> local-variable-declaration DELIM
Rule 152   declaration-statement -> local-constant-declaration DELIM
Rule 153   local-variable-declaration -> type variable-declarators
Rule 154   local-constant-declaration -> CONST simple-type constant-declarators
Rule 155   empty-statement -> DELIM
Rule 156   expression-statement -> statement-expression DELIM
Rule 157   statement-expression -> invocation-expression
Rule 158   statement-expression -> assignment
Rule 159   selection-statement -> if-statement
Rule 160   selection-statement -> switch-statement
Rule 161   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block
Rule 162   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
Rule 163   if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
Rule 164   M_if -> empty
Rule 165   M_else -> empty
Rule 166   M_quad -> empty
Rule 167   switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
Rule 168   M_switch -> empty
Rule 169   switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END
Rule 170   switch-sections -> switch-section
Rule 171   switch-sections -> switch-sections switch-section
Rule 172   switch-section -> switch-label M_quad statement-list
Rule 173   switch-label -> CASE literal COLON
Rule 174   switch-label -> DEFAULT COLON
Rule 175   iteration-statement -> while-statement M_quad
Rule 176   iteration-statement -> for-statement M_quad
Rule 177   iteration-statement -> do-statement M_quad
Rule 178   while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
Rule 179   M_while -> empty
Rule 180   do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
Rule 181   for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
Rule 182   for-initializer-opt -> for-initializer
Rule 183   for-initializer-opt -> empty
Rule 184   for-initializer -> statement-expression-list
Rule 185   for-condition -> expression
Rule 186   for-condition -> empty
Rule 187   for-iterator-opt -> for-iterator
Rule 188   for-iterator-opt -> empty
Rule 189   for-iterator -> statement-expression-list
Rule 190   statement-expression-list -> statement-expression
Rule 191   statement-expression-list -> statement-expression-list COMMA statement-expression
Rule 192   jump-statement -> break-statement
Rule 193   jump-statement -> continue-statement
Rule 194   jump-statement -> return-statement
Rule 195   break-statement -> BREAK DELIM
Rule 196   continue-statement -> CONTINUE DELIM
Rule 197   return-statement -> RETURN expression DELIM
Rule 198   return-statement -> RETURN DELIM
Rule 199   literal -> ICONST
Rule 200   literal -> DCONST
Rule 201   literal -> TRUE
Rule 202   literal -> FALSE
Rule 203   literal -> CCONST
Rule 204   literal -> SCONST
Rule 205   empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 32 99 117
BITAND               : 48
BITANDEQUAL          : 105
BITCOMP              : 71
BITNOT               : 70
BITOR                : 44
BITOREQUAL           : 106
BITXOR               : 46
BITXOREQUAL          : 107
BLOCK_BEGIN          : 12 75 128 129 169
BLOCK_END            : 12 75 128 129 169
BOOL                 : 25
BREAK                : 195
CASE                 : 173
CCONST               : 203
CHAR                 : 27
CLASS                : 9 10
CLOSE_BRACKET        : 29 94 95
CLOSE_PAREN          : 87 88 90 91 119 120 146 149 161 162 163 167 178 180 181
COLON                : 9 36 150 173 174
COMMA                : 31 74 115 125 148 191
CONDOP               : 36
CONSOLE              : 146 149
CONST                : 20 21 154
CONTINUE             : 196
DCONST               : 200
DEFAULT              : 174
DELIM                : 2 20 21 110 111 146 149 151 152 155 156 180 181 181 195 196 197 198
DIV                  : 65
DIVEQUAL             : 103
DO                   : 180
DOT                  : 89 91 146 149
ELSE                 : 162 163
EQ                   : 50
FALSE                : 202
FOR                  : 181
GE                   : 56
GOTO                 : 
GT                   : 54
ICONST               : 29 199
IDENTIFIER           : 9 10 11 32 81 89 89 90 91 91 94 96 116 117 119 120 126 149 150
IF                   : 161 162 163
INT                  : 26
LE                   : 55
LOGAND               : 42
LOGOR                : 38
LSHIFT               : 58
LSHIFTEQUAL          : 108
LT                   : 53
MINUS                : 62 69
MINUSEQUAL           : 101
MOD                  : 66
MODEQUAL             : 104
NE                   : 51
NEW                  : 87
OPEN_BRACKET         : 29 94 95
OPEN_PAREN           : 87 88 90 91 119 120 146 149 161 162 163 167 178 180 181
PLUS                 : 61 68
PLUSEQUAL            : 100
PRIVATE              : 113
PUBLIC               : 112
READLINE             : 149
RETURN               : 197 198
RSHIFT               : 59
RSHIFTEQUAL          : 109
SCONST               : 204
STRING               : 28
SWITCH               : 167
TIMES                : 64
TIMESEQUAL           : 102
TRUE                 : 201
VOID                 : 120
WHILE                : 178 180
WRITELINE            : 146
error                : 

Nonterminals, with rules where they appear

M_and                : 42
M_bstart             : 129 169
M_else               : 162 163
M_if                 : 161 162 163
M_or                 : 38
M_quad               : 163 167 172 175 176 177 178 180 180 181 181 181
M_switch             : 167
M_while              : 178
additive-expression  : 57 58 59 61 62
and-expression       : 45 46 48
argument-list-opt    : 87 90 91
array-initializer    : 79
array-type           : 24
assignment           : 34 158
assignment-operator  : 96 97 98
block                : 137 161 162 162 163 178 180 181
break-statement      : 192
class-body           : 8
class-declaration    : 6 7
class-declarations   : 4 7
class-declarations-opt : 1
class-header         : 8
class-member-declaration : 15 16
class-member-declarations : 13 16
class-member-declarations-opt : 12
class-type           : 9 23 87
compilation-unit     : 0
conditional-and-expression : 37 38 42
conditional-expression : 33
conditional-or-expression : 35 36 38
constant-declaration : 17
constant-declarator  : 30 31
constant-declarators : 20 21 31 154
continue-statement   : 193
declaration-statement : 136
do-statement         : 177
element-access       : 82 98
empty                : 3 5 14 39 40 77 93 122 130 132 164 165 166 168 179 183 186 188
empty-statement      : 138
equality-expression  : 47 48 50 51
exclusive-or-expression : 43 44 46
expression           : 32 36 36 73 74 78 88 94 95 96 97 98 147 148 161 162 163 167 178 180 185 197
expression-list      : 74 76 92
expression-statement : 139
field-declaration    : 18
fixed-parameter      : 124 125
fixed-parameters     : 123 125
for-condition        : 181
for-initializer      : 182
for-initializer-opt  : 181
for-iterator         : 187
for-iterator-opt     : 181
for-statement        : 176
formal-parameter-list : 121
formal-parameter-list-opt : 119 120
if-statement         : 159 163
inclusive-or-expression : 41 42 44
invocation-expression : 85 157
iteration-statement  : 141
jump-statement       : 142
labeled-statement    : 135
literal              : 80 173
local-constant-declaration : 152
local-variable-declaration : 151
member-access        : 84 95 97
method-block         : 127
method-body          : 118
method-declaration   : 19 145
method-header        : 118
modifier             : 21 110
multiplicative-expression : 60 61 62 64 65 66
object-creation-expression : 86
parenthesized-expression : 83
primary-expression   : 67
primary-no-array-creation-expression : 72
print-list           : 146 148
read-statement       : 144
relational-expression : 49 50 51 53 54 55 56
return-statement     : 194
selection-statement  : 140
semi-opt             : 8
shift-expression     : 52 53 54 55 56 58 59
simple-type          : 20 21 22 29 154
statement            : 133 134 150
statement-expression : 156 190 191
statement-expression-list : 184 189 191
statement-list       : 131 134 172
statement-list-opt   : 128 129
switch-block         : 167
switch-label         : 172
switch-section       : 170 171
switch-sections      : 169 171
switch-statement     : 160
type                 : 110 111 119 126 153
unary-expression     : 63 64 65 66 68 69 70 71
variable-declarator  : 114 115
variable-declarators : 110 111 115 153
variable-initializer : 117
variable-initializer-list-opt : 75
while-statement      : 175
write-statement      : 143

Parsing method: LALR

state 0

    (0) S' -> . compilation-unit
    (1) compilation-unit -> . class-declarations-opt
    (4) class-declarations-opt -> . class-declarations
    (5) class-declarations-opt -> . empty
    (6) class-declarations -> . class-declaration
    (7) class-declarations -> . class-declarations class-declaration
    (205) empty -> .
    (8) class-declaration -> . class-header class-body semi-opt
    (9) class-header -> . CLASS IDENTIFIER COLON class-type
    (10) class-header -> . CLASS IDENTIFIER

    $end            reduce using rule 205 (empty -> .)
    CLASS           shift and go to state 6

    class-declarations-opt         shift and go to state 1
    class-declarations             shift and go to state 2
    class-declaration              shift and go to state 3
    compilation-unit               shift and go to state 4
    empty                          shift and go to state 5
    class-header                   shift and go to state 7

state 1

    (1) compilation-unit -> class-declarations-opt .

    $end            reduce using rule 1 (compilation-unit -> class-declarations-opt .)


state 2

    (4) class-declarations-opt -> class-declarations .
    (7) class-declarations -> class-declarations . class-declaration
    (8) class-declaration -> . class-header class-body semi-opt
    (9) class-header -> . CLASS IDENTIFIER COLON class-type
    (10) class-header -> . CLASS IDENTIFIER

    $end            reduce using rule 4 (class-declarations-opt -> class-declarations .)
    CLASS           shift and go to state 6

    class-declaration              shift and go to state 8
    class-header                   shift and go to state 7

state 3

    (6) class-declarations -> class-declaration .

    CLASS           reduce using rule 6 (class-declarations -> class-declaration .)
    $end            reduce using rule 6 (class-declarations -> class-declaration .)


state 4

    (0) S' -> compilation-unit .



state 5

    (5) class-declarations-opt -> empty .

    $end            reduce using rule 5 (class-declarations-opt -> empty .)


state 6

    (9) class-header -> CLASS . IDENTIFIER COLON class-type
    (10) class-header -> CLASS . IDENTIFIER

    IDENTIFIER      shift and go to state 9


state 7

    (8) class-declaration -> class-header . class-body semi-opt
    (12) class-body -> . BLOCK_BEGIN class-member-declarations-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 11

    class-body                     shift and go to state 10

state 8

    (7) class-declarations -> class-declarations class-declaration .

    CLASS           reduce using rule 7 (class-declarations -> class-declarations class-declaration .)
    $end            reduce using rule 7 (class-declarations -> class-declarations class-declaration .)


state 9

    (9) class-header -> CLASS IDENTIFIER . COLON class-type
    (10) class-header -> CLASS IDENTIFIER .

    COLON           shift and go to state 12
    BLOCK_BEGIN     reduce using rule 10 (class-header -> CLASS IDENTIFIER .)


state 10

    (8) class-declaration -> class-header class-body . semi-opt
    (2) semi-opt -> . DELIM
    (3) semi-opt -> . empty
    (205) empty -> .

    DELIM           shift and go to state 14
    CLASS           reduce using rule 205 (empty -> .)
    $end            reduce using rule 205 (empty -> .)

    semi-opt                       shift and go to state 13
    empty                          shift and go to state 15

state 11

    (12) class-body -> BLOCK_BEGIN . class-member-declarations-opt BLOCK_END
    (13) class-member-declarations-opt -> . class-member-declarations
    (14) class-member-declarations-opt -> . empty
    (15) class-member-declarations -> . class-member-declaration
    (16) class-member-declarations -> . class-member-declarations class-member-declaration
    (205) empty -> .
    (17) class-member-declaration -> . constant-declaration
    (18) class-member-declaration -> . field-declaration
    (19) class-member-declaration -> . method-declaration
    (20) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (21) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (110) field-declaration -> . modifier type variable-declarators DELIM
    (111) field-declaration -> . type variable-declarators DELIM
    (118) method-declaration -> . method-header method-body
    (112) modifier -> . PUBLIC
    (113) modifier -> . PRIVATE
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (119) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 205 (empty -> .)
    CONST           shift and go to state 20
    PUBLIC          shift and go to state 37
    PRIVATE         shift and go to state 22
    VOID            shift and go to state 17
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 31

    modifier                       shift and go to state 36
    class-member-declarations-opt  shift and go to state 29
    method-header                  shift and go to state 16
    array-type                     shift and go to state 28
    class-member-declarations      shift and go to state 30
    method-declaration             shift and go to state 23
    class-member-declaration       shift and go to state 35
    field-declaration              shift and go to state 24
    class-type                     shift and go to state 34
    simple-type                    shift and go to state 19
    constant-declaration           shift and go to state 25
    type                           shift and go to state 26
    empty                          shift and go to state 27

state 12

    (9) class-header -> CLASS IDENTIFIER COLON . class-type
    (11) class-type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 31

    class-type                     shift and go to state 38

state 13

    (8) class-declaration -> class-header class-body semi-opt .

    CLASS           reduce using rule 8 (class-declaration -> class-header class-body semi-opt .)
    $end            reduce using rule 8 (class-declaration -> class-header class-body semi-opt .)


state 14

    (2) semi-opt -> DELIM .

    CLASS           reduce using rule 2 (semi-opt -> DELIM .)
    $end            reduce using rule 2 (semi-opt -> DELIM .)


state 15

    (3) semi-opt -> empty .

    CLASS           reduce using rule 3 (semi-opt -> empty .)
    $end            reduce using rule 3 (semi-opt -> empty .)


state 16

    (118) method-declaration -> method-header . method-body
    (127) method-body -> . method-block
    (128) method-block -> . BLOCK_BEGIN statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 40

    method-body                    shift and go to state 41
    method-block                   shift and go to state 39

state 17

    (120) method-header -> VOID . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 42


state 18

    (27) simple-type -> CHAR .

    OPEN_BRACKET    reduce using rule 27 (simple-type -> CHAR .)
    IDENTIFIER      reduce using rule 27 (simple-type -> CHAR .)


state 19

    (22) type -> simple-type .
    (29) array-type -> simple-type . OPEN_BRACKET ICONST CLOSE_BRACKET

    IDENTIFIER      reduce using rule 22 (type -> simple-type .)
    OPEN_BRACKET    shift and go to state 43


state 20

    (20) constant-declaration -> CONST . simple-type constant-declarators DELIM
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING

    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21

    simple-type                    shift and go to state 44

state 21

    (28) simple-type -> STRING .

    OPEN_BRACKET    reduce using rule 28 (simple-type -> STRING .)
    IDENTIFIER      reduce using rule 28 (simple-type -> STRING .)


state 22

    (113) modifier -> PRIVATE .

    CONST           reduce using rule 113 (modifier -> PRIVATE .)
    BOOL            reduce using rule 113 (modifier -> PRIVATE .)
    INT             reduce using rule 113 (modifier -> PRIVATE .)
    CHAR            reduce using rule 113 (modifier -> PRIVATE .)
    STRING          reduce using rule 113 (modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 113 (modifier -> PRIVATE .)


state 23

    (19) class-member-declaration -> method-declaration .

    CONST           reduce using rule 19 (class-member-declaration -> method-declaration .)
    PUBLIC          reduce using rule 19 (class-member-declaration -> method-declaration .)
    PRIVATE         reduce using rule 19 (class-member-declaration -> method-declaration .)
    VOID            reduce using rule 19 (class-member-declaration -> method-declaration .)
    BOOL            reduce using rule 19 (class-member-declaration -> method-declaration .)
    INT             reduce using rule 19 (class-member-declaration -> method-declaration .)
    CHAR            reduce using rule 19 (class-member-declaration -> method-declaration .)
    STRING          reduce using rule 19 (class-member-declaration -> method-declaration .)
    IDENTIFIER      reduce using rule 19 (class-member-declaration -> method-declaration .)
    BLOCK_END       reduce using rule 19 (class-member-declaration -> method-declaration .)


state 24

    (18) class-member-declaration -> field-declaration .

    CONST           reduce using rule 18 (class-member-declaration -> field-declaration .)
    PUBLIC          reduce using rule 18 (class-member-declaration -> field-declaration .)
    PRIVATE         reduce using rule 18 (class-member-declaration -> field-declaration .)
    VOID            reduce using rule 18 (class-member-declaration -> field-declaration .)
    BOOL            reduce using rule 18 (class-member-declaration -> field-declaration .)
    INT             reduce using rule 18 (class-member-declaration -> field-declaration .)
    CHAR            reduce using rule 18 (class-member-declaration -> field-declaration .)
    STRING          reduce using rule 18 (class-member-declaration -> field-declaration .)
    IDENTIFIER      reduce using rule 18 (class-member-declaration -> field-declaration .)
    BLOCK_END       reduce using rule 18 (class-member-declaration -> field-declaration .)


state 25

    (17) class-member-declaration -> constant-declaration .

    CONST           reduce using rule 17 (class-member-declaration -> constant-declaration .)
    PUBLIC          reduce using rule 17 (class-member-declaration -> constant-declaration .)
    PRIVATE         reduce using rule 17 (class-member-declaration -> constant-declaration .)
    VOID            reduce using rule 17 (class-member-declaration -> constant-declaration .)
    BOOL            reduce using rule 17 (class-member-declaration -> constant-declaration .)
    INT             reduce using rule 17 (class-member-declaration -> constant-declaration .)
    CHAR            reduce using rule 17 (class-member-declaration -> constant-declaration .)
    STRING          reduce using rule 17 (class-member-declaration -> constant-declaration .)
    IDENTIFIER      reduce using rule 17 (class-member-declaration -> constant-declaration .)
    BLOCK_END       reduce using rule 17 (class-member-declaration -> constant-declaration .)


state 26

    (111) field-declaration -> type . variable-declarators DELIM
    (119) method-header -> type . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (114) variable-declarators -> . variable-declarator
    (115) variable-declarators -> . variable-declarators COMMA variable-declarator
    (116) variable-declarator -> . IDENTIFIER
    (117) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 47

    variable-declarator            shift and go to state 45
    variable-declarators           shift and go to state 46

state 27

    (14) class-member-declarations-opt -> empty .

    BLOCK_END       reduce using rule 14 (class-member-declarations-opt -> empty .)


state 28

    (24) type -> array-type .

    IDENTIFIER      reduce using rule 24 (type -> array-type .)


state 29

    (12) class-body -> BLOCK_BEGIN class-member-declarations-opt . BLOCK_END

    BLOCK_END       shift and go to state 48


state 30

    (13) class-member-declarations-opt -> class-member-declarations .
    (16) class-member-declarations -> class-member-declarations . class-member-declaration
    (17) class-member-declaration -> . constant-declaration
    (18) class-member-declaration -> . field-declaration
    (19) class-member-declaration -> . method-declaration
    (20) constant-declaration -> . CONST simple-type constant-declarators DELIM
    (21) constant-declaration -> . modifier CONST simple-type constant-declarators DELIM
    (110) field-declaration -> . modifier type variable-declarators DELIM
    (111) field-declaration -> . type variable-declarators DELIM
    (118) method-declaration -> . method-header method-body
    (112) modifier -> . PUBLIC
    (113) modifier -> . PRIVATE
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (119) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BLOCK_END       reduce using rule 13 (class-member-declarations-opt -> class-member-declarations .)
    CONST           shift and go to state 20
    PUBLIC          shift and go to state 37
    PRIVATE         shift and go to state 22
    VOID            shift and go to state 17
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 31

    modifier                       shift and go to state 36
    method-header                  shift and go to state 16
    array-type                     shift and go to state 28
    method-declaration             shift and go to state 23
    simple-type                    shift and go to state 19
    field-declaration              shift and go to state 24
    class-type                     shift and go to state 34
    class-member-declaration       shift and go to state 49
    constant-declaration           shift and go to state 25
    type                           shift and go to state 26

state 31

    (11) class-type -> IDENTIFIER .

    IDENTIFIER      reduce using rule 11 (class-type -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 11 (class-type -> IDENTIFIER .)
    BLOCK_BEGIN     reduce using rule 11 (class-type -> IDENTIFIER .)


state 32

    (26) simple-type -> INT .

    OPEN_BRACKET    reduce using rule 26 (simple-type -> INT .)
    IDENTIFIER      reduce using rule 26 (simple-type -> INT .)


state 33

    (25) simple-type -> BOOL .

    OPEN_BRACKET    reduce using rule 25 (simple-type -> BOOL .)
    IDENTIFIER      reduce using rule 25 (simple-type -> BOOL .)


state 34

    (23) type -> class-type .

    IDENTIFIER      reduce using rule 23 (type -> class-type .)


state 35

    (15) class-member-declarations -> class-member-declaration .

    CONST           reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    PUBLIC          reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    PRIVATE         reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    VOID            reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    BOOL            reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    INT             reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    CHAR            reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    STRING          reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    IDENTIFIER      reduce using rule 15 (class-member-declarations -> class-member-declaration .)
    BLOCK_END       reduce using rule 15 (class-member-declarations -> class-member-declaration .)


state 36

    (21) constant-declaration -> modifier . CONST simple-type constant-declarators DELIM
    (110) field-declaration -> modifier . type variable-declarators DELIM
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CONST           shift and go to state 50
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 31

    array-type                     shift and go to state 28
    simple-type                    shift and go to state 19
    class-type                     shift and go to state 34
    type                           shift and go to state 51

state 37

    (112) modifier -> PUBLIC .

    CONST           reduce using rule 112 (modifier -> PUBLIC .)
    BOOL            reduce using rule 112 (modifier -> PUBLIC .)
    INT             reduce using rule 112 (modifier -> PUBLIC .)
    CHAR            reduce using rule 112 (modifier -> PUBLIC .)
    STRING          reduce using rule 112 (modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 112 (modifier -> PUBLIC .)


state 38

    (9) class-header -> CLASS IDENTIFIER COLON class-type .

    BLOCK_BEGIN     reduce using rule 9 (class-header -> CLASS IDENTIFIER COLON class-type .)


state 39

    (127) method-body -> method-block .

    CONST           reduce using rule 127 (method-body -> method-block .)
    PUBLIC          reduce using rule 127 (method-body -> method-block .)
    PRIVATE         reduce using rule 127 (method-body -> method-block .)
    VOID            reduce using rule 127 (method-body -> method-block .)
    BOOL            reduce using rule 127 (method-body -> method-block .)
    INT             reduce using rule 127 (method-body -> method-block .)
    CHAR            reduce using rule 127 (method-body -> method-block .)
    STRING          reduce using rule 127 (method-body -> method-block .)
    IDENTIFIER      reduce using rule 127 (method-body -> method-block .)
    BLOCK_END       reduce using rule 127 (method-body -> method-block .)
    BLOCK_BEGIN     reduce using rule 127 (method-body -> method-block .)
    DELIM           reduce using rule 127 (method-body -> method-block .)
    CONSOLE         reduce using rule 127 (method-body -> method-block .)
    IF              reduce using rule 127 (method-body -> method-block .)
    SWITCH          reduce using rule 127 (method-body -> method-block .)
    WHILE           reduce using rule 127 (method-body -> method-block .)
    FOR             reduce using rule 127 (method-body -> method-block .)
    DO              reduce using rule 127 (method-body -> method-block .)
    BREAK           reduce using rule 127 (method-body -> method-block .)
    CONTINUE        reduce using rule 127 (method-body -> method-block .)
    RETURN          reduce using rule 127 (method-body -> method-block .)
    CASE            reduce using rule 127 (method-body -> method-block .)
    DEFAULT         reduce using rule 127 (method-body -> method-block .)


state 40

    (128) method-block -> BLOCK_BEGIN . statement-list-opt BLOCK_END
    (131) statement-list-opt -> . statement-list
    (132) statement-list-opt -> . empty
    (133) statement-list -> . statement
    (134) statement-list -> . statement-list statement
    (205) empty -> .
    (135) statement -> . labeled-statement
    (136) statement -> . declaration-statement
    (137) statement -> . block
    (138) statement -> . empty-statement
    (139) statement -> . expression-statement
    (140) statement -> . selection-statement
    (141) statement -> . iteration-statement
    (142) statement -> . jump-statement
    (143) statement -> . write-statement
    (144) statement -> . read-statement
    (145) statement -> . method-declaration
    (150) labeled-statement -> . IDENTIFIER COLON statement
    (151) declaration-statement -> . local-variable-declaration DELIM
    (152) declaration-statement -> . local-constant-declaration DELIM
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (155) empty-statement -> . DELIM
    (156) expression-statement -> . statement-expression DELIM
    (159) selection-statement -> . if-statement
    (160) selection-statement -> . switch-statement
    (175) iteration-statement -> . while-statement M_quad
    (176) iteration-statement -> . for-statement M_quad
    (177) iteration-statement -> . do-statement M_quad
    (192) jump-statement -> . break-statement
    (193) jump-statement -> . continue-statement
    (194) jump-statement -> . return-statement
    (146) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (149) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (118) method-declaration -> . method-header method-body
    (153) local-variable-declaration -> . type variable-declarators
    (154) local-constant-declaration -> . CONST simple-type constant-declarators
    (157) statement-expression -> . invocation-expression
    (158) statement-expression -> . assignment
    (161) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (162) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (167) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (178) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (181) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (180) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (195) break-statement -> . BREAK DELIM
    (196) continue-statement -> . CONTINUE DELIM
    (197) return-statement -> . RETURN expression DELIM
    (198) return-statement -> . RETURN DELIM
    (119) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 205 (empty -> .)
    IDENTIFIER      shift and go to state 72
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 76
    CONST           shift and go to state 62
    IF              shift and go to state 84
    SWITCH          shift and go to state 94
    WHILE           shift and go to state 58
    FOR             shift and go to state 77
    DO              shift and go to state 52
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 61
    RETURN          shift and go to state 85
    VOID            shift and go to state 17
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21

    return-statement               shift and go to state 53
    method-header                  shift and go to state 16
    write-statement                shift and go to state 54
    member-access                  shift and go to state 55
    selection-statement            shift and go to state 56
    empty-statement                shift and go to state 59
    statement-list-opt             shift and go to state 60
    method-declaration             shift and go to state 67
    expression-statement           shift and go to state 63
    break-statement                shift and go to state 64
    element-access                 shift and go to state 66
    statement-expression           shift and go to state 83
    local-constant-declaration     shift and go to state 68
    statement                      shift and go to state 69
    assignment                     shift and go to state 70
    for-statement                  shift and go to state 71
    type                           shift and go to state 73
    read-statement                 shift and go to state 74
    do-statement                   shift and go to state 75
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 79
    labeled-statement              shift and go to state 80
    declaration-statement          shift and go to state 81
    switch-statement               shift and go to state 82
    iteration-statement            shift and go to state 86
    jump-statement                 shift and go to state 87
    local-variable-declaration     shift and go to state 88
    if-statement                   shift and go to state 90
    empty                          shift and go to state 91
    statement-list                 shift and go to state 92
    class-type                     shift and go to state 34
    while-statement                shift and go to state 93
    simple-type                    shift and go to state 19
    block                          shift and go to state 95

state 41

    (118) method-declaration -> method-header method-body .

    CONST           reduce using rule 118 (method-declaration -> method-header method-body .)
    PUBLIC          reduce using rule 118 (method-declaration -> method-header method-body .)
    PRIVATE         reduce using rule 118 (method-declaration -> method-header method-body .)
    VOID            reduce using rule 118 (method-declaration -> method-header method-body .)
    BOOL            reduce using rule 118 (method-declaration -> method-header method-body .)
    INT             reduce using rule 118 (method-declaration -> method-header method-body .)
    CHAR            reduce using rule 118 (method-declaration -> method-header method-body .)
    STRING          reduce using rule 118 (method-declaration -> method-header method-body .)
    IDENTIFIER      reduce using rule 118 (method-declaration -> method-header method-body .)
    BLOCK_END       reduce using rule 118 (method-declaration -> method-header method-body .)
    BLOCK_BEGIN     reduce using rule 118 (method-declaration -> method-header method-body .)
    DELIM           reduce using rule 118 (method-declaration -> method-header method-body .)
    CONSOLE         reduce using rule 118 (method-declaration -> method-header method-body .)
    IF              reduce using rule 118 (method-declaration -> method-header method-body .)
    SWITCH          reduce using rule 118 (method-declaration -> method-header method-body .)
    WHILE           reduce using rule 118 (method-declaration -> method-header method-body .)
    FOR             reduce using rule 118 (method-declaration -> method-header method-body .)
    DO              reduce using rule 118 (method-declaration -> method-header method-body .)
    BREAK           reduce using rule 118 (method-declaration -> method-header method-body .)
    CONTINUE        reduce using rule 118 (method-declaration -> method-header method-body .)
    RETURN          reduce using rule 118 (method-declaration -> method-header method-body .)
    CASE            reduce using rule 118 (method-declaration -> method-header method-body .)
    DEFAULT         reduce using rule 118 (method-declaration -> method-header method-body .)


state 42

    (120) method-header -> VOID IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 96


state 43

    (29) array-type -> simple-type OPEN_BRACKET . ICONST CLOSE_BRACKET

    ICONST          shift and go to state 97


state 44

    (20) constant-declaration -> CONST simple-type . constant-declarators DELIM
    (30) constant-declarators -> . constant-declarator
    (31) constant-declarators -> . constant-declarators COMMA constant-declarator
    (32) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 99

    constant-declarators           shift and go to state 98
    constant-declarator            shift and go to state 100

state 45

    (114) variable-declarators -> variable-declarator .

    COMMA           reduce using rule 114 (variable-declarators -> variable-declarator .)
    DELIM           reduce using rule 114 (variable-declarators -> variable-declarator .)


state 46

    (111) field-declaration -> type variable-declarators . DELIM
    (115) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 101
    COMMA           shift and go to state 102


state 47

    (119) method-header -> type IDENTIFIER . OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (116) variable-declarator -> IDENTIFIER .
    (117) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    OPEN_PAREN      shift and go to state 103
    COMMA           reduce using rule 116 (variable-declarator -> IDENTIFIER .)
    DELIM           reduce using rule 116 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 104


state 48

    (12) class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .

    DELIM           reduce using rule 12 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    CLASS           reduce using rule 12 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)
    $end            reduce using rule 12 (class-body -> BLOCK_BEGIN class-member-declarations-opt BLOCK_END .)


state 49

    (16) class-member-declarations -> class-member-declarations class-member-declaration .

    CONST           reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PUBLIC          reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    PRIVATE         reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    VOID            reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BOOL            reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    INT             reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    CHAR            reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    STRING          reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    IDENTIFIER      reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)
    BLOCK_END       reduce using rule 16 (class-member-declarations -> class-member-declarations class-member-declaration .)


state 50

    (21) constant-declaration -> modifier CONST . simple-type constant-declarators DELIM
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING

    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21

    simple-type                    shift and go to state 105

state 51

    (110) field-declaration -> modifier type . variable-declarators DELIM
    (114) variable-declarators -> . variable-declarator
    (115) variable-declarators -> . variable-declarators COMMA variable-declarator
    (116) variable-declarator -> . IDENTIFIER
    (117) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 106

    variable-declarator            shift and go to state 45
    variable-declarators           shift and go to state 107

state 52

    (180) do-statement -> DO . M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (166) M_quad -> . empty
    (205) empty -> .

    BLOCK_BEGIN     reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 109
    empty                          shift and go to state 108

state 53

    (194) jump-statement -> return-statement .

    IDENTIFIER      reduce using rule 194 (jump-statement -> return-statement .)
    BLOCK_BEGIN     reduce using rule 194 (jump-statement -> return-statement .)
    DELIM           reduce using rule 194 (jump-statement -> return-statement .)
    CONSOLE         reduce using rule 194 (jump-statement -> return-statement .)
    CONST           reduce using rule 194 (jump-statement -> return-statement .)
    IF              reduce using rule 194 (jump-statement -> return-statement .)
    SWITCH          reduce using rule 194 (jump-statement -> return-statement .)
    WHILE           reduce using rule 194 (jump-statement -> return-statement .)
    FOR             reduce using rule 194 (jump-statement -> return-statement .)
    DO              reduce using rule 194 (jump-statement -> return-statement .)
    BREAK           reduce using rule 194 (jump-statement -> return-statement .)
    CONTINUE        reduce using rule 194 (jump-statement -> return-statement .)
    RETURN          reduce using rule 194 (jump-statement -> return-statement .)
    VOID            reduce using rule 194 (jump-statement -> return-statement .)
    BOOL            reduce using rule 194 (jump-statement -> return-statement .)
    INT             reduce using rule 194 (jump-statement -> return-statement .)
    CHAR            reduce using rule 194 (jump-statement -> return-statement .)
    STRING          reduce using rule 194 (jump-statement -> return-statement .)
    BLOCK_END       reduce using rule 194 (jump-statement -> return-statement .)
    CASE            reduce using rule 194 (jump-statement -> return-statement .)
    DEFAULT         reduce using rule 194 (jump-statement -> return-statement .)


state 54

    (143) statement -> write-statement .

    IDENTIFIER      reduce using rule 143 (statement -> write-statement .)
    BLOCK_BEGIN     reduce using rule 143 (statement -> write-statement .)
    DELIM           reduce using rule 143 (statement -> write-statement .)
    CONSOLE         reduce using rule 143 (statement -> write-statement .)
    CONST           reduce using rule 143 (statement -> write-statement .)
    IF              reduce using rule 143 (statement -> write-statement .)
    SWITCH          reduce using rule 143 (statement -> write-statement .)
    WHILE           reduce using rule 143 (statement -> write-statement .)
    FOR             reduce using rule 143 (statement -> write-statement .)
    DO              reduce using rule 143 (statement -> write-statement .)
    BREAK           reduce using rule 143 (statement -> write-statement .)
    CONTINUE        reduce using rule 143 (statement -> write-statement .)
    RETURN          reduce using rule 143 (statement -> write-statement .)
    VOID            reduce using rule 143 (statement -> write-statement .)
    BOOL            reduce using rule 143 (statement -> write-statement .)
    INT             reduce using rule 143 (statement -> write-statement .)
    CHAR            reduce using rule 143 (statement -> write-statement .)
    STRING          reduce using rule 143 (statement -> write-statement .)
    BLOCK_END       reduce using rule 143 (statement -> write-statement .)
    CASE            reduce using rule 143 (statement -> write-statement .)
    DEFAULT         reduce using rule 143 (statement -> write-statement .)


state 55

    (97) assignment -> member-access . assignment-operator expression
    (95) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET
    (99) assignment-operator -> . ASSIGN
    (100) assignment-operator -> . PLUSEQUAL
    (101) assignment-operator -> . MINUSEQUAL
    (102) assignment-operator -> . TIMESEQUAL
    (103) assignment-operator -> . DIVEQUAL
    (104) assignment-operator -> . MODEQUAL
    (105) assignment-operator -> . BITANDEQUAL
    (106) assignment-operator -> . BITOREQUAL
    (107) assignment-operator -> . BITXOREQUAL
    (108) assignment-operator -> . LSHIFTEQUAL
    (109) assignment-operator -> . RSHIFTEQUAL

    OPEN_BRACKET    shift and go to state 115
    ASSIGN          shift and go to state 121
    PLUSEQUAL       shift and go to state 117
    MINUSEQUAL      shift and go to state 114
    TIMESEQUAL      shift and go to state 113
    DIVEQUAL        shift and go to state 110
    MODEQUAL        shift and go to state 122
    BITANDEQUAL     shift and go to state 119
    BITOREQUAL      shift and go to state 116
    BITXOREQUAL     shift and go to state 118
    LSHIFTEQUAL     shift and go to state 120
    RSHIFTEQUAL     shift and go to state 111

    assignment-operator            shift and go to state 112

state 56

    (140) statement -> selection-statement .

    IDENTIFIER      reduce using rule 140 (statement -> selection-statement .)
    BLOCK_BEGIN     reduce using rule 140 (statement -> selection-statement .)
    DELIM           reduce using rule 140 (statement -> selection-statement .)
    CONSOLE         reduce using rule 140 (statement -> selection-statement .)
    CONST           reduce using rule 140 (statement -> selection-statement .)
    IF              reduce using rule 140 (statement -> selection-statement .)
    SWITCH          reduce using rule 140 (statement -> selection-statement .)
    WHILE           reduce using rule 140 (statement -> selection-statement .)
    FOR             reduce using rule 140 (statement -> selection-statement .)
    DO              reduce using rule 140 (statement -> selection-statement .)
    BREAK           reduce using rule 140 (statement -> selection-statement .)
    CONTINUE        reduce using rule 140 (statement -> selection-statement .)
    RETURN          reduce using rule 140 (statement -> selection-statement .)
    VOID            reduce using rule 140 (statement -> selection-statement .)
    BOOL            reduce using rule 140 (statement -> selection-statement .)
    INT             reduce using rule 140 (statement -> selection-statement .)
    CHAR            reduce using rule 140 (statement -> selection-statement .)
    STRING          reduce using rule 140 (statement -> selection-statement .)
    BLOCK_END       reduce using rule 140 (statement -> selection-statement .)
    CASE            reduce using rule 140 (statement -> selection-statement .)
    DEFAULT         reduce using rule 140 (statement -> selection-statement .)


state 57

    (129) block -> BLOCK_BEGIN . M_bstart statement-list-opt BLOCK_END
    (130) M_bstart -> . empty
    (205) empty -> .

    IDENTIFIER      reduce using rule 205 (empty -> .)
    BLOCK_BEGIN     reduce using rule 205 (empty -> .)
    DELIM           reduce using rule 205 (empty -> .)
    CONSOLE         reduce using rule 205 (empty -> .)
    CONST           reduce using rule 205 (empty -> .)
    IF              reduce using rule 205 (empty -> .)
    SWITCH          reduce using rule 205 (empty -> .)
    WHILE           reduce using rule 205 (empty -> .)
    FOR             reduce using rule 205 (empty -> .)
    DO              reduce using rule 205 (empty -> .)
    BREAK           reduce using rule 205 (empty -> .)
    CONTINUE        reduce using rule 205 (empty -> .)
    RETURN          reduce using rule 205 (empty -> .)
    VOID            reduce using rule 205 (empty -> .)
    BOOL            reduce using rule 205 (empty -> .)
    INT             reduce using rule 205 (empty -> .)
    CHAR            reduce using rule 205 (empty -> .)
    STRING          reduce using rule 205 (empty -> .)
    BLOCK_END       reduce using rule 205 (empty -> .)

    M_bstart                       shift and go to state 123
    empty                          shift and go to state 124

state 58

    (178) while-statement -> WHILE . M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (166) M_quad -> . empty
    (205) empty -> .

    OPEN_PAREN      reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 125
    empty                          shift and go to state 108

state 59

    (138) statement -> empty-statement .

    IDENTIFIER      reduce using rule 138 (statement -> empty-statement .)
    BLOCK_BEGIN     reduce using rule 138 (statement -> empty-statement .)
    DELIM           reduce using rule 138 (statement -> empty-statement .)
    CONSOLE         reduce using rule 138 (statement -> empty-statement .)
    CONST           reduce using rule 138 (statement -> empty-statement .)
    IF              reduce using rule 138 (statement -> empty-statement .)
    SWITCH          reduce using rule 138 (statement -> empty-statement .)
    WHILE           reduce using rule 138 (statement -> empty-statement .)
    FOR             reduce using rule 138 (statement -> empty-statement .)
    DO              reduce using rule 138 (statement -> empty-statement .)
    BREAK           reduce using rule 138 (statement -> empty-statement .)
    CONTINUE        reduce using rule 138 (statement -> empty-statement .)
    RETURN          reduce using rule 138 (statement -> empty-statement .)
    VOID            reduce using rule 138 (statement -> empty-statement .)
    BOOL            reduce using rule 138 (statement -> empty-statement .)
    INT             reduce using rule 138 (statement -> empty-statement .)
    CHAR            reduce using rule 138 (statement -> empty-statement .)
    STRING          reduce using rule 138 (statement -> empty-statement .)
    BLOCK_END       reduce using rule 138 (statement -> empty-statement .)
    CASE            reduce using rule 138 (statement -> empty-statement .)
    DEFAULT         reduce using rule 138 (statement -> empty-statement .)


state 60

    (128) method-block -> BLOCK_BEGIN statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 126


state 61

    (196) continue-statement -> CONTINUE . DELIM

    DELIM           shift and go to state 127


state 62

    (154) local-constant-declaration -> CONST . simple-type constant-declarators
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING

    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21

    simple-type                    shift and go to state 128

state 63

    (139) statement -> expression-statement .

    IDENTIFIER      reduce using rule 139 (statement -> expression-statement .)
    BLOCK_BEGIN     reduce using rule 139 (statement -> expression-statement .)
    DELIM           reduce using rule 139 (statement -> expression-statement .)
    CONSOLE         reduce using rule 139 (statement -> expression-statement .)
    CONST           reduce using rule 139 (statement -> expression-statement .)
    IF              reduce using rule 139 (statement -> expression-statement .)
    SWITCH          reduce using rule 139 (statement -> expression-statement .)
    WHILE           reduce using rule 139 (statement -> expression-statement .)
    FOR             reduce using rule 139 (statement -> expression-statement .)
    DO              reduce using rule 139 (statement -> expression-statement .)
    BREAK           reduce using rule 139 (statement -> expression-statement .)
    CONTINUE        reduce using rule 139 (statement -> expression-statement .)
    RETURN          reduce using rule 139 (statement -> expression-statement .)
    VOID            reduce using rule 139 (statement -> expression-statement .)
    BOOL            reduce using rule 139 (statement -> expression-statement .)
    INT             reduce using rule 139 (statement -> expression-statement .)
    CHAR            reduce using rule 139 (statement -> expression-statement .)
    STRING          reduce using rule 139 (statement -> expression-statement .)
    BLOCK_END       reduce using rule 139 (statement -> expression-statement .)
    CASE            reduce using rule 139 (statement -> expression-statement .)
    DEFAULT         reduce using rule 139 (statement -> expression-statement .)


state 64

    (192) jump-statement -> break-statement .

    IDENTIFIER      reduce using rule 192 (jump-statement -> break-statement .)
    BLOCK_BEGIN     reduce using rule 192 (jump-statement -> break-statement .)
    DELIM           reduce using rule 192 (jump-statement -> break-statement .)
    CONSOLE         reduce using rule 192 (jump-statement -> break-statement .)
    CONST           reduce using rule 192 (jump-statement -> break-statement .)
    IF              reduce using rule 192 (jump-statement -> break-statement .)
    SWITCH          reduce using rule 192 (jump-statement -> break-statement .)
    WHILE           reduce using rule 192 (jump-statement -> break-statement .)
    FOR             reduce using rule 192 (jump-statement -> break-statement .)
    DO              reduce using rule 192 (jump-statement -> break-statement .)
    BREAK           reduce using rule 192 (jump-statement -> break-statement .)
    CONTINUE        reduce using rule 192 (jump-statement -> break-statement .)
    RETURN          reduce using rule 192 (jump-statement -> break-statement .)
    VOID            reduce using rule 192 (jump-statement -> break-statement .)
    BOOL            reduce using rule 192 (jump-statement -> break-statement .)
    INT             reduce using rule 192 (jump-statement -> break-statement .)
    CHAR            reduce using rule 192 (jump-statement -> break-statement .)
    STRING          reduce using rule 192 (jump-statement -> break-statement .)
    BLOCK_END       reduce using rule 192 (jump-statement -> break-statement .)
    CASE            reduce using rule 192 (jump-statement -> break-statement .)
    DEFAULT         reduce using rule 192 (jump-statement -> break-statement .)


state 65

    (155) empty-statement -> DELIM .

    IDENTIFIER      reduce using rule 155 (empty-statement -> DELIM .)
    BLOCK_BEGIN     reduce using rule 155 (empty-statement -> DELIM .)
    DELIM           reduce using rule 155 (empty-statement -> DELIM .)
    CONSOLE         reduce using rule 155 (empty-statement -> DELIM .)
    CONST           reduce using rule 155 (empty-statement -> DELIM .)
    IF              reduce using rule 155 (empty-statement -> DELIM .)
    SWITCH          reduce using rule 155 (empty-statement -> DELIM .)
    WHILE           reduce using rule 155 (empty-statement -> DELIM .)
    FOR             reduce using rule 155 (empty-statement -> DELIM .)
    DO              reduce using rule 155 (empty-statement -> DELIM .)
    BREAK           reduce using rule 155 (empty-statement -> DELIM .)
    CONTINUE        reduce using rule 155 (empty-statement -> DELIM .)
    RETURN          reduce using rule 155 (empty-statement -> DELIM .)
    VOID            reduce using rule 155 (empty-statement -> DELIM .)
    BOOL            reduce using rule 155 (empty-statement -> DELIM .)
    INT             reduce using rule 155 (empty-statement -> DELIM .)
    CHAR            reduce using rule 155 (empty-statement -> DELIM .)
    STRING          reduce using rule 155 (empty-statement -> DELIM .)
    BLOCK_END       reduce using rule 155 (empty-statement -> DELIM .)
    CASE            reduce using rule 155 (empty-statement -> DELIM .)
    DEFAULT         reduce using rule 155 (empty-statement -> DELIM .)


state 66

    (98) assignment -> element-access . assignment-operator expression
    (99) assignment-operator -> . ASSIGN
    (100) assignment-operator -> . PLUSEQUAL
    (101) assignment-operator -> . MINUSEQUAL
    (102) assignment-operator -> . TIMESEQUAL
    (103) assignment-operator -> . DIVEQUAL
    (104) assignment-operator -> . MODEQUAL
    (105) assignment-operator -> . BITANDEQUAL
    (106) assignment-operator -> . BITOREQUAL
    (107) assignment-operator -> . BITXOREQUAL
    (108) assignment-operator -> . LSHIFTEQUAL
    (109) assignment-operator -> . RSHIFTEQUAL

    ASSIGN          shift and go to state 121
    PLUSEQUAL       shift and go to state 117
    MINUSEQUAL      shift and go to state 114
    TIMESEQUAL      shift and go to state 113
    DIVEQUAL        shift and go to state 110
    MODEQUAL        shift and go to state 122
    BITANDEQUAL     shift and go to state 119
    BITOREQUAL      shift and go to state 116
    BITXOREQUAL     shift and go to state 118
    LSHIFTEQUAL     shift and go to state 120
    RSHIFTEQUAL     shift and go to state 111

    assignment-operator            shift and go to state 129

state 67

    (145) statement -> method-declaration .

    IDENTIFIER      reduce using rule 145 (statement -> method-declaration .)
    BLOCK_BEGIN     reduce using rule 145 (statement -> method-declaration .)
    DELIM           reduce using rule 145 (statement -> method-declaration .)
    CONSOLE         reduce using rule 145 (statement -> method-declaration .)
    CONST           reduce using rule 145 (statement -> method-declaration .)
    IF              reduce using rule 145 (statement -> method-declaration .)
    SWITCH          reduce using rule 145 (statement -> method-declaration .)
    WHILE           reduce using rule 145 (statement -> method-declaration .)
    FOR             reduce using rule 145 (statement -> method-declaration .)
    DO              reduce using rule 145 (statement -> method-declaration .)
    BREAK           reduce using rule 145 (statement -> method-declaration .)
    CONTINUE        reduce using rule 145 (statement -> method-declaration .)
    RETURN          reduce using rule 145 (statement -> method-declaration .)
    VOID            reduce using rule 145 (statement -> method-declaration .)
    BOOL            reduce using rule 145 (statement -> method-declaration .)
    INT             reduce using rule 145 (statement -> method-declaration .)
    CHAR            reduce using rule 145 (statement -> method-declaration .)
    STRING          reduce using rule 145 (statement -> method-declaration .)
    BLOCK_END       reduce using rule 145 (statement -> method-declaration .)
    CASE            reduce using rule 145 (statement -> method-declaration .)
    DEFAULT         reduce using rule 145 (statement -> method-declaration .)


state 68

    (152) declaration-statement -> local-constant-declaration . DELIM

    DELIM           shift and go to state 130


state 69

    (133) statement-list -> statement .

    IDENTIFIER      reduce using rule 133 (statement-list -> statement .)
    BLOCK_BEGIN     reduce using rule 133 (statement-list -> statement .)
    DELIM           reduce using rule 133 (statement-list -> statement .)
    CONSOLE         reduce using rule 133 (statement-list -> statement .)
    CONST           reduce using rule 133 (statement-list -> statement .)
    IF              reduce using rule 133 (statement-list -> statement .)
    SWITCH          reduce using rule 133 (statement-list -> statement .)
    WHILE           reduce using rule 133 (statement-list -> statement .)
    FOR             reduce using rule 133 (statement-list -> statement .)
    DO              reduce using rule 133 (statement-list -> statement .)
    BREAK           reduce using rule 133 (statement-list -> statement .)
    CONTINUE        reduce using rule 133 (statement-list -> statement .)
    RETURN          reduce using rule 133 (statement-list -> statement .)
    VOID            reduce using rule 133 (statement-list -> statement .)
    BOOL            reduce using rule 133 (statement-list -> statement .)
    INT             reduce using rule 133 (statement-list -> statement .)
    CHAR            reduce using rule 133 (statement-list -> statement .)
    STRING          reduce using rule 133 (statement-list -> statement .)
    BLOCK_END       reduce using rule 133 (statement-list -> statement .)
    CASE            reduce using rule 133 (statement-list -> statement .)
    DEFAULT         reduce using rule 133 (statement-list -> statement .)


state 70

    (158) statement-expression -> assignment .

    DELIM           reduce using rule 158 (statement-expression -> assignment .)
    COMMA           reduce using rule 158 (statement-expression -> assignment .)
    CLOSE_PAREN     reduce using rule 158 (statement-expression -> assignment .)


state 71

    (176) iteration-statement -> for-statement . M_quad
    (166) M_quad -> . empty
    (205) empty -> .

    IDENTIFIER      reduce using rule 205 (empty -> .)
    BLOCK_BEGIN     reduce using rule 205 (empty -> .)
    DELIM           reduce using rule 205 (empty -> .)
    CONSOLE         reduce using rule 205 (empty -> .)
    CONST           reduce using rule 205 (empty -> .)
    IF              reduce using rule 205 (empty -> .)
    SWITCH          reduce using rule 205 (empty -> .)
    WHILE           reduce using rule 205 (empty -> .)
    FOR             reduce using rule 205 (empty -> .)
    DO              reduce using rule 205 (empty -> .)
    BREAK           reduce using rule 205 (empty -> .)
    CONTINUE        reduce using rule 205 (empty -> .)
    RETURN          reduce using rule 205 (empty -> .)
    VOID            reduce using rule 205 (empty -> .)
    BOOL            reduce using rule 205 (empty -> .)
    INT             reduce using rule 205 (empty -> .)
    CHAR            reduce using rule 205 (empty -> .)
    STRING          reduce using rule 205 (empty -> .)
    BLOCK_END       reduce using rule 205 (empty -> .)
    CASE            reduce using rule 205 (empty -> .)
    DEFAULT         reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 131
    empty                          shift and go to state 108

state 72

    (150) labeled-statement -> IDENTIFIER . COLON statement
    (90) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> IDENTIFIER . DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> IDENTIFIER . assignment-operator expression
    (11) class-type -> IDENTIFIER .
    (89) member-access -> IDENTIFIER . DOT IDENTIFIER
    (94) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (99) assignment-operator -> . ASSIGN
    (100) assignment-operator -> . PLUSEQUAL
    (101) assignment-operator -> . MINUSEQUAL
    (102) assignment-operator -> . TIMESEQUAL
    (103) assignment-operator -> . DIVEQUAL
    (104) assignment-operator -> . MODEQUAL
    (105) assignment-operator -> . BITANDEQUAL
    (106) assignment-operator -> . BITOREQUAL
    (107) assignment-operator -> . BITXOREQUAL
    (108) assignment-operator -> . LSHIFTEQUAL
    (109) assignment-operator -> . RSHIFTEQUAL

    COLON           shift and go to state 135
    OPEN_PAREN      shift and go to state 134
    DOT             shift and go to state 132
    IDENTIFIER      reduce using rule 11 (class-type -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 133
    ASSIGN          shift and go to state 121
    PLUSEQUAL       shift and go to state 117
    MINUSEQUAL      shift and go to state 114
    TIMESEQUAL      shift and go to state 113
    DIVEQUAL        shift and go to state 110
    MODEQUAL        shift and go to state 122
    BITANDEQUAL     shift and go to state 119
    BITOREQUAL      shift and go to state 116
    BITXOREQUAL     shift and go to state 118
    LSHIFTEQUAL     shift and go to state 120
    RSHIFTEQUAL     shift and go to state 111

    assignment-operator            shift and go to state 136

state 73

    (153) local-variable-declaration -> type . variable-declarators
    (119) method-header -> type . IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (114) variable-declarators -> . variable-declarator
    (115) variable-declarators -> . variable-declarators COMMA variable-declarator
    (116) variable-declarator -> . IDENTIFIER
    (117) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 47

    variable-declarator            shift and go to state 45
    variable-declarators           shift and go to state 137

state 74

    (144) statement -> read-statement .

    IDENTIFIER      reduce using rule 144 (statement -> read-statement .)
    BLOCK_BEGIN     reduce using rule 144 (statement -> read-statement .)
    DELIM           reduce using rule 144 (statement -> read-statement .)
    CONSOLE         reduce using rule 144 (statement -> read-statement .)
    CONST           reduce using rule 144 (statement -> read-statement .)
    IF              reduce using rule 144 (statement -> read-statement .)
    SWITCH          reduce using rule 144 (statement -> read-statement .)
    WHILE           reduce using rule 144 (statement -> read-statement .)
    FOR             reduce using rule 144 (statement -> read-statement .)
    DO              reduce using rule 144 (statement -> read-statement .)
    BREAK           reduce using rule 144 (statement -> read-statement .)
    CONTINUE        reduce using rule 144 (statement -> read-statement .)
    RETURN          reduce using rule 144 (statement -> read-statement .)
    VOID            reduce using rule 144 (statement -> read-statement .)
    BOOL            reduce using rule 144 (statement -> read-statement .)
    INT             reduce using rule 144 (statement -> read-statement .)
    CHAR            reduce using rule 144 (statement -> read-statement .)
    STRING          reduce using rule 144 (statement -> read-statement .)
    BLOCK_END       reduce using rule 144 (statement -> read-statement .)
    CASE            reduce using rule 144 (statement -> read-statement .)
    DEFAULT         reduce using rule 144 (statement -> read-statement .)


state 75

    (177) iteration-statement -> do-statement . M_quad
    (166) M_quad -> . empty
    (205) empty -> .

    IDENTIFIER      reduce using rule 205 (empty -> .)
    BLOCK_BEGIN     reduce using rule 205 (empty -> .)
    DELIM           reduce using rule 205 (empty -> .)
    CONSOLE         reduce using rule 205 (empty -> .)
    CONST           reduce using rule 205 (empty -> .)
    IF              reduce using rule 205 (empty -> .)
    SWITCH          reduce using rule 205 (empty -> .)
    WHILE           reduce using rule 205 (empty -> .)
    FOR             reduce using rule 205 (empty -> .)
    DO              reduce using rule 205 (empty -> .)
    BREAK           reduce using rule 205 (empty -> .)
    CONTINUE        reduce using rule 205 (empty -> .)
    RETURN          reduce using rule 205 (empty -> .)
    VOID            reduce using rule 205 (empty -> .)
    BOOL            reduce using rule 205 (empty -> .)
    INT             reduce using rule 205 (empty -> .)
    CHAR            reduce using rule 205 (empty -> .)
    STRING          reduce using rule 205 (empty -> .)
    BLOCK_END       reduce using rule 205 (empty -> .)
    CASE            reduce using rule 205 (empty -> .)
    DEFAULT         reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 138
    empty                          shift and go to state 108

state 76

    (146) write-statement -> CONSOLE . DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (149) read-statement -> CONSOLE . DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    DOT             shift and go to state 139


state 77

    (181) for-statement -> FOR . OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    OPEN_PAREN      shift and go to state 140


state 78

    (193) jump-statement -> continue-statement .

    IDENTIFIER      reduce using rule 193 (jump-statement -> continue-statement .)
    BLOCK_BEGIN     reduce using rule 193 (jump-statement -> continue-statement .)
    DELIM           reduce using rule 193 (jump-statement -> continue-statement .)
    CONSOLE         reduce using rule 193 (jump-statement -> continue-statement .)
    CONST           reduce using rule 193 (jump-statement -> continue-statement .)
    IF              reduce using rule 193 (jump-statement -> continue-statement .)
    SWITCH          reduce using rule 193 (jump-statement -> continue-statement .)
    WHILE           reduce using rule 193 (jump-statement -> continue-statement .)
    FOR             reduce using rule 193 (jump-statement -> continue-statement .)
    DO              reduce using rule 193 (jump-statement -> continue-statement .)
    BREAK           reduce using rule 193 (jump-statement -> continue-statement .)
    CONTINUE        reduce using rule 193 (jump-statement -> continue-statement .)
    RETURN          reduce using rule 193 (jump-statement -> continue-statement .)
    VOID            reduce using rule 193 (jump-statement -> continue-statement .)
    BOOL            reduce using rule 193 (jump-statement -> continue-statement .)
    INT             reduce using rule 193 (jump-statement -> continue-statement .)
    CHAR            reduce using rule 193 (jump-statement -> continue-statement .)
    STRING          reduce using rule 193 (jump-statement -> continue-statement .)
    BLOCK_END       reduce using rule 193 (jump-statement -> continue-statement .)
    CASE            reduce using rule 193 (jump-statement -> continue-statement .)
    DEFAULT         reduce using rule 193 (jump-statement -> continue-statement .)


state 79

    (157) statement-expression -> invocation-expression .

    DELIM           reduce using rule 157 (statement-expression -> invocation-expression .)
    COMMA           reduce using rule 157 (statement-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 157 (statement-expression -> invocation-expression .)


state 80

    (135) statement -> labeled-statement .

    IDENTIFIER      reduce using rule 135 (statement -> labeled-statement .)
    BLOCK_BEGIN     reduce using rule 135 (statement -> labeled-statement .)
    DELIM           reduce using rule 135 (statement -> labeled-statement .)
    CONSOLE         reduce using rule 135 (statement -> labeled-statement .)
    CONST           reduce using rule 135 (statement -> labeled-statement .)
    IF              reduce using rule 135 (statement -> labeled-statement .)
    SWITCH          reduce using rule 135 (statement -> labeled-statement .)
    WHILE           reduce using rule 135 (statement -> labeled-statement .)
    FOR             reduce using rule 135 (statement -> labeled-statement .)
    DO              reduce using rule 135 (statement -> labeled-statement .)
    BREAK           reduce using rule 135 (statement -> labeled-statement .)
    CONTINUE        reduce using rule 135 (statement -> labeled-statement .)
    RETURN          reduce using rule 135 (statement -> labeled-statement .)
    VOID            reduce using rule 135 (statement -> labeled-statement .)
    BOOL            reduce using rule 135 (statement -> labeled-statement .)
    INT             reduce using rule 135 (statement -> labeled-statement .)
    CHAR            reduce using rule 135 (statement -> labeled-statement .)
    STRING          reduce using rule 135 (statement -> labeled-statement .)
    BLOCK_END       reduce using rule 135 (statement -> labeled-statement .)
    CASE            reduce using rule 135 (statement -> labeled-statement .)
    DEFAULT         reduce using rule 135 (statement -> labeled-statement .)


state 81

    (136) statement -> declaration-statement .

    IDENTIFIER      reduce using rule 136 (statement -> declaration-statement .)
    BLOCK_BEGIN     reduce using rule 136 (statement -> declaration-statement .)
    DELIM           reduce using rule 136 (statement -> declaration-statement .)
    CONSOLE         reduce using rule 136 (statement -> declaration-statement .)
    CONST           reduce using rule 136 (statement -> declaration-statement .)
    IF              reduce using rule 136 (statement -> declaration-statement .)
    SWITCH          reduce using rule 136 (statement -> declaration-statement .)
    WHILE           reduce using rule 136 (statement -> declaration-statement .)
    FOR             reduce using rule 136 (statement -> declaration-statement .)
    DO              reduce using rule 136 (statement -> declaration-statement .)
    BREAK           reduce using rule 136 (statement -> declaration-statement .)
    CONTINUE        reduce using rule 136 (statement -> declaration-statement .)
    RETURN          reduce using rule 136 (statement -> declaration-statement .)
    VOID            reduce using rule 136 (statement -> declaration-statement .)
    BOOL            reduce using rule 136 (statement -> declaration-statement .)
    INT             reduce using rule 136 (statement -> declaration-statement .)
    CHAR            reduce using rule 136 (statement -> declaration-statement .)
    STRING          reduce using rule 136 (statement -> declaration-statement .)
    BLOCK_END       reduce using rule 136 (statement -> declaration-statement .)
    CASE            reduce using rule 136 (statement -> declaration-statement .)
    DEFAULT         reduce using rule 136 (statement -> declaration-statement .)


state 82

    (160) selection-statement -> switch-statement .

    IDENTIFIER      reduce using rule 160 (selection-statement -> switch-statement .)
    BLOCK_BEGIN     reduce using rule 160 (selection-statement -> switch-statement .)
    DELIM           reduce using rule 160 (selection-statement -> switch-statement .)
    CONSOLE         reduce using rule 160 (selection-statement -> switch-statement .)
    CONST           reduce using rule 160 (selection-statement -> switch-statement .)
    IF              reduce using rule 160 (selection-statement -> switch-statement .)
    SWITCH          reduce using rule 160 (selection-statement -> switch-statement .)
    WHILE           reduce using rule 160 (selection-statement -> switch-statement .)
    FOR             reduce using rule 160 (selection-statement -> switch-statement .)
    DO              reduce using rule 160 (selection-statement -> switch-statement .)
    BREAK           reduce using rule 160 (selection-statement -> switch-statement .)
    CONTINUE        reduce using rule 160 (selection-statement -> switch-statement .)
    RETURN          reduce using rule 160 (selection-statement -> switch-statement .)
    VOID            reduce using rule 160 (selection-statement -> switch-statement .)
    BOOL            reduce using rule 160 (selection-statement -> switch-statement .)
    INT             reduce using rule 160 (selection-statement -> switch-statement .)
    CHAR            reduce using rule 160 (selection-statement -> switch-statement .)
    STRING          reduce using rule 160 (selection-statement -> switch-statement .)
    BLOCK_END       reduce using rule 160 (selection-statement -> switch-statement .)
    CASE            reduce using rule 160 (selection-statement -> switch-statement .)
    DEFAULT         reduce using rule 160 (selection-statement -> switch-statement .)


state 83

    (156) expression-statement -> statement-expression . DELIM

    DELIM           shift and go to state 141


state 84

    (161) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block
    (162) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> IF . OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad

    OPEN_PAREN      shift and go to state 142


state 85

    (197) return-statement -> RETURN . expression DELIM
    (198) return-statement -> RETURN . DELIM
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    DELIM           shift and go to state 152
    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    conditional-or-expression      shift and go to state 172
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    expression                     shift and go to state 177
    parenthesized-expression       shift and go to state 178

state 86

    (141) statement -> iteration-statement .

    IDENTIFIER      reduce using rule 141 (statement -> iteration-statement .)
    BLOCK_BEGIN     reduce using rule 141 (statement -> iteration-statement .)
    DELIM           reduce using rule 141 (statement -> iteration-statement .)
    CONSOLE         reduce using rule 141 (statement -> iteration-statement .)
    CONST           reduce using rule 141 (statement -> iteration-statement .)
    IF              reduce using rule 141 (statement -> iteration-statement .)
    SWITCH          reduce using rule 141 (statement -> iteration-statement .)
    WHILE           reduce using rule 141 (statement -> iteration-statement .)
    FOR             reduce using rule 141 (statement -> iteration-statement .)
    DO              reduce using rule 141 (statement -> iteration-statement .)
    BREAK           reduce using rule 141 (statement -> iteration-statement .)
    CONTINUE        reduce using rule 141 (statement -> iteration-statement .)
    RETURN          reduce using rule 141 (statement -> iteration-statement .)
    VOID            reduce using rule 141 (statement -> iteration-statement .)
    BOOL            reduce using rule 141 (statement -> iteration-statement .)
    INT             reduce using rule 141 (statement -> iteration-statement .)
    CHAR            reduce using rule 141 (statement -> iteration-statement .)
    STRING          reduce using rule 141 (statement -> iteration-statement .)
    BLOCK_END       reduce using rule 141 (statement -> iteration-statement .)
    CASE            reduce using rule 141 (statement -> iteration-statement .)
    DEFAULT         reduce using rule 141 (statement -> iteration-statement .)


state 87

    (142) statement -> jump-statement .

    IDENTIFIER      reduce using rule 142 (statement -> jump-statement .)
    BLOCK_BEGIN     reduce using rule 142 (statement -> jump-statement .)
    DELIM           reduce using rule 142 (statement -> jump-statement .)
    CONSOLE         reduce using rule 142 (statement -> jump-statement .)
    CONST           reduce using rule 142 (statement -> jump-statement .)
    IF              reduce using rule 142 (statement -> jump-statement .)
    SWITCH          reduce using rule 142 (statement -> jump-statement .)
    WHILE           reduce using rule 142 (statement -> jump-statement .)
    FOR             reduce using rule 142 (statement -> jump-statement .)
    DO              reduce using rule 142 (statement -> jump-statement .)
    BREAK           reduce using rule 142 (statement -> jump-statement .)
    CONTINUE        reduce using rule 142 (statement -> jump-statement .)
    RETURN          reduce using rule 142 (statement -> jump-statement .)
    VOID            reduce using rule 142 (statement -> jump-statement .)
    BOOL            reduce using rule 142 (statement -> jump-statement .)
    INT             reduce using rule 142 (statement -> jump-statement .)
    CHAR            reduce using rule 142 (statement -> jump-statement .)
    STRING          reduce using rule 142 (statement -> jump-statement .)
    BLOCK_END       reduce using rule 142 (statement -> jump-statement .)
    CASE            reduce using rule 142 (statement -> jump-statement .)
    DEFAULT         reduce using rule 142 (statement -> jump-statement .)


state 88

    (151) declaration-statement -> local-variable-declaration . DELIM

    DELIM           shift and go to state 179


state 89

    (195) break-statement -> BREAK . DELIM

    DELIM           shift and go to state 180


state 90

    (159) selection-statement -> if-statement .

    IDENTIFIER      reduce using rule 159 (selection-statement -> if-statement .)
    BLOCK_BEGIN     reduce using rule 159 (selection-statement -> if-statement .)
    DELIM           reduce using rule 159 (selection-statement -> if-statement .)
    CONSOLE         reduce using rule 159 (selection-statement -> if-statement .)
    CONST           reduce using rule 159 (selection-statement -> if-statement .)
    IF              reduce using rule 159 (selection-statement -> if-statement .)
    SWITCH          reduce using rule 159 (selection-statement -> if-statement .)
    WHILE           reduce using rule 159 (selection-statement -> if-statement .)
    FOR             reduce using rule 159 (selection-statement -> if-statement .)
    DO              reduce using rule 159 (selection-statement -> if-statement .)
    BREAK           reduce using rule 159 (selection-statement -> if-statement .)
    CONTINUE        reduce using rule 159 (selection-statement -> if-statement .)
    RETURN          reduce using rule 159 (selection-statement -> if-statement .)
    VOID            reduce using rule 159 (selection-statement -> if-statement .)
    BOOL            reduce using rule 159 (selection-statement -> if-statement .)
    INT             reduce using rule 159 (selection-statement -> if-statement .)
    CHAR            reduce using rule 159 (selection-statement -> if-statement .)
    STRING          reduce using rule 159 (selection-statement -> if-statement .)
    BLOCK_END       reduce using rule 159 (selection-statement -> if-statement .)
    CASE            reduce using rule 159 (selection-statement -> if-statement .)
    DEFAULT         reduce using rule 159 (selection-statement -> if-statement .)


state 91

    (132) statement-list-opt -> empty .

    BLOCK_END       reduce using rule 132 (statement-list-opt -> empty .)


state 92

    (131) statement-list-opt -> statement-list .
    (134) statement-list -> statement-list . statement
    (135) statement -> . labeled-statement
    (136) statement -> . declaration-statement
    (137) statement -> . block
    (138) statement -> . empty-statement
    (139) statement -> . expression-statement
    (140) statement -> . selection-statement
    (141) statement -> . iteration-statement
    (142) statement -> . jump-statement
    (143) statement -> . write-statement
    (144) statement -> . read-statement
    (145) statement -> . method-declaration
    (150) labeled-statement -> . IDENTIFIER COLON statement
    (151) declaration-statement -> . local-variable-declaration DELIM
    (152) declaration-statement -> . local-constant-declaration DELIM
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (155) empty-statement -> . DELIM
    (156) expression-statement -> . statement-expression DELIM
    (159) selection-statement -> . if-statement
    (160) selection-statement -> . switch-statement
    (175) iteration-statement -> . while-statement M_quad
    (176) iteration-statement -> . for-statement M_quad
    (177) iteration-statement -> . do-statement M_quad
    (192) jump-statement -> . break-statement
    (193) jump-statement -> . continue-statement
    (194) jump-statement -> . return-statement
    (146) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (149) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (118) method-declaration -> . method-header method-body
    (153) local-variable-declaration -> . type variable-declarators
    (154) local-constant-declaration -> . CONST simple-type constant-declarators
    (157) statement-expression -> . invocation-expression
    (158) statement-expression -> . assignment
    (161) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (162) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (167) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (178) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (181) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (180) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (195) break-statement -> . BREAK DELIM
    (196) continue-statement -> . CONTINUE DELIM
    (197) return-statement -> . RETURN expression DELIM
    (198) return-statement -> . RETURN DELIM
    (119) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 131 (statement-list-opt -> statement-list .)
    IDENTIFIER      shift and go to state 72
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 76
    CONST           shift and go to state 62
    IF              shift and go to state 84
    SWITCH          shift and go to state 94
    WHILE           shift and go to state 58
    FOR             shift and go to state 77
    DO              shift and go to state 52
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 61
    RETURN          shift and go to state 85
    VOID            shift and go to state 17
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21

    return-statement               shift and go to state 53
    method-header                  shift and go to state 16
    write-statement                shift and go to state 54
    member-access                  shift and go to state 55
    selection-statement            shift and go to state 56
    empty-statement                shift and go to state 59
    expression-statement           shift and go to state 63
    break-statement                shift and go to state 64
    method-declaration             shift and go to state 67
    element-access                 shift and go to state 66
    statement-expression           shift and go to state 83
    local-constant-declaration     shift and go to state 68
    statement                      shift and go to state 181
    assignment                     shift and go to state 70
    for-statement                  shift and go to state 71
    type                           shift and go to state 73
    read-statement                 shift and go to state 74
    do-statement                   shift and go to state 75
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 79
    labeled-statement              shift and go to state 80
    declaration-statement          shift and go to state 81
    switch-statement               shift and go to state 82
    jump-statement                 shift and go to state 87
    iteration-statement            shift and go to state 86
    local-variable-declaration     shift and go to state 88
    if-statement                   shift and go to state 90
    class-type                     shift and go to state 34
    while-statement                shift and go to state 93
    simple-type                    shift and go to state 19
    block                          shift and go to state 95

state 93

    (175) iteration-statement -> while-statement . M_quad
    (166) M_quad -> . empty
    (205) empty -> .

    IDENTIFIER      reduce using rule 205 (empty -> .)
    BLOCK_BEGIN     reduce using rule 205 (empty -> .)
    DELIM           reduce using rule 205 (empty -> .)
    CONSOLE         reduce using rule 205 (empty -> .)
    CONST           reduce using rule 205 (empty -> .)
    IF              reduce using rule 205 (empty -> .)
    SWITCH          reduce using rule 205 (empty -> .)
    WHILE           reduce using rule 205 (empty -> .)
    FOR             reduce using rule 205 (empty -> .)
    DO              reduce using rule 205 (empty -> .)
    BREAK           reduce using rule 205 (empty -> .)
    CONTINUE        reduce using rule 205 (empty -> .)
    RETURN          reduce using rule 205 (empty -> .)
    VOID            reduce using rule 205 (empty -> .)
    BOOL            reduce using rule 205 (empty -> .)
    INT             reduce using rule 205 (empty -> .)
    CHAR            reduce using rule 205 (empty -> .)
    STRING          reduce using rule 205 (empty -> .)
    BLOCK_END       reduce using rule 205 (empty -> .)
    CASE            reduce using rule 205 (empty -> .)
    DEFAULT         reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 182
    empty                          shift and go to state 108

state 94

    (167) switch-statement -> SWITCH . OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block

    OPEN_PAREN      shift and go to state 183


state 95

    (137) statement -> block .

    IDENTIFIER      reduce using rule 137 (statement -> block .)
    BLOCK_BEGIN     reduce using rule 137 (statement -> block .)
    DELIM           reduce using rule 137 (statement -> block .)
    CONSOLE         reduce using rule 137 (statement -> block .)
    CONST           reduce using rule 137 (statement -> block .)
    IF              reduce using rule 137 (statement -> block .)
    SWITCH          reduce using rule 137 (statement -> block .)
    WHILE           reduce using rule 137 (statement -> block .)
    FOR             reduce using rule 137 (statement -> block .)
    DO              reduce using rule 137 (statement -> block .)
    BREAK           reduce using rule 137 (statement -> block .)
    CONTINUE        reduce using rule 137 (statement -> block .)
    RETURN          reduce using rule 137 (statement -> block .)
    VOID            reduce using rule 137 (statement -> block .)
    BOOL            reduce using rule 137 (statement -> block .)
    INT             reduce using rule 137 (statement -> block .)
    CHAR            reduce using rule 137 (statement -> block .)
    STRING          reduce using rule 137 (statement -> block .)
    BLOCK_END       reduce using rule 137 (statement -> block .)
    CASE            reduce using rule 137 (statement -> block .)
    DEFAULT         reduce using rule 137 (statement -> block .)


state 96

    (120) method-header -> VOID IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (121) formal-parameter-list-opt -> . formal-parameter-list
    (122) formal-parameter-list-opt -> . empty
    (123) formal-parameter-list -> . fixed-parameters
    (205) empty -> .
    (124) fixed-parameters -> . fixed-parameter
    (125) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (126) fixed-parameter -> . type IDENTIFIER
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 205 (empty -> .)
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 31

    array-type                     shift and go to state 28
    fixed-parameters               shift and go to state 187
    simple-type                    shift and go to state 19
    formal-parameter-list-opt      shift and go to state 185
    class-type                     shift and go to state 34
    formal-parameter-list          shift and go to state 189
    type                           shift and go to state 188
    empty                          shift and go to state 184
    fixed-parameter                shift and go to state 186

state 97

    (29) array-type -> simple-type OPEN_BRACKET ICONST . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 190


state 98

    (20) constant-declaration -> CONST simple-type constant-declarators . DELIM
    (31) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 191
    COMMA           shift and go to state 192


state 99

    (32) constant-declarator -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 193


state 100

    (30) constant-declarators -> constant-declarator .

    DELIM           reduce using rule 30 (constant-declarators -> constant-declarator .)
    COMMA           reduce using rule 30 (constant-declarators -> constant-declarator .)


state 101

    (111) field-declaration -> type variable-declarators DELIM .

    CONST           reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)
    PUBLIC          reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)
    PRIVATE         reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)
    VOID            reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)
    BOOL            reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)
    INT             reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)
    CHAR            reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)
    STRING          reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 111 (field-declaration -> type variable-declarators DELIM .)


state 102

    (115) variable-declarators -> variable-declarators COMMA . variable-declarator
    (116) variable-declarator -> . IDENTIFIER
    (117) variable-declarator -> . IDENTIFIER ASSIGN variable-initializer

    IDENTIFIER      shift and go to state 106

    variable-declarator            shift and go to state 194

state 103

    (119) method-header -> type IDENTIFIER OPEN_PAREN . formal-parameter-list-opt CLOSE_PAREN
    (121) formal-parameter-list-opt -> . formal-parameter-list
    (122) formal-parameter-list-opt -> . empty
    (123) formal-parameter-list -> . fixed-parameters
    (205) empty -> .
    (124) fixed-parameters -> . fixed-parameter
    (125) fixed-parameters -> . fixed-parameters COMMA fixed-parameter
    (126) fixed-parameter -> . type IDENTIFIER
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 205 (empty -> .)
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 31

    array-type                     shift and go to state 28
    fixed-parameters               shift and go to state 187
    simple-type                    shift and go to state 19
    formal-parameter-list-opt      shift and go to state 195
    class-type                     shift and go to state 34
    formal-parameter-list          shift and go to state 189
    type                           shift and go to state 188
    empty                          shift and go to state 184
    fixed-parameter                shift and go to state 186

state 104

    (117) variable-declarator -> IDENTIFIER ASSIGN . variable-initializer
    (78) variable-initializer -> . expression
    (79) variable-initializer -> . array-initializer
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (75) array-initializer -> . BLOCK_BEGIN variable-initializer-list-opt BLOCK_END
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_BEGIN     shift and go to state 196
    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    array-initializer              shift and go to state 197
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    variable-initializer           shift and go to state 198
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 199
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 105

    (21) constant-declaration -> modifier CONST simple-type . constant-declarators DELIM
    (30) constant-declarators -> . constant-declarator
    (31) constant-declarators -> . constant-declarators COMMA constant-declarator
    (32) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 99

    constant-declarators           shift and go to state 200
    constant-declarator            shift and go to state 100

state 106

    (116) variable-declarator -> IDENTIFIER .
    (117) variable-declarator -> IDENTIFIER . ASSIGN variable-initializer

    DELIM           reduce using rule 116 (variable-declarator -> IDENTIFIER .)
    COMMA           reduce using rule 116 (variable-declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 104


state 107

    (110) field-declaration -> modifier type variable-declarators . DELIM
    (115) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           shift and go to state 201
    COMMA           shift and go to state 102


state 108

    (166) M_quad -> empty .

    IDENTIFIER      reduce using rule 166 (M_quad -> empty .)
    BLOCK_BEGIN     reduce using rule 166 (M_quad -> empty .)
    DELIM           reduce using rule 166 (M_quad -> empty .)
    CONSOLE         reduce using rule 166 (M_quad -> empty .)
    CONST           reduce using rule 166 (M_quad -> empty .)
    IF              reduce using rule 166 (M_quad -> empty .)
    SWITCH          reduce using rule 166 (M_quad -> empty .)
    WHILE           reduce using rule 166 (M_quad -> empty .)
    FOR             reduce using rule 166 (M_quad -> empty .)
    DO              reduce using rule 166 (M_quad -> empty .)
    BREAK           reduce using rule 166 (M_quad -> empty .)
    CONTINUE        reduce using rule 166 (M_quad -> empty .)
    RETURN          reduce using rule 166 (M_quad -> empty .)
    VOID            reduce using rule 166 (M_quad -> empty .)
    BOOL            reduce using rule 166 (M_quad -> empty .)
    INT             reduce using rule 166 (M_quad -> empty .)
    CHAR            reduce using rule 166 (M_quad -> empty .)
    STRING          reduce using rule 166 (M_quad -> empty .)
    BLOCK_END       reduce using rule 166 (M_quad -> empty .)
    CASE            reduce using rule 166 (M_quad -> empty .)
    DEFAULT         reduce using rule 166 (M_quad -> empty .)
    CLOSE_PAREN     reduce using rule 166 (M_quad -> empty .)
    PLUS            reduce using rule 166 (M_quad -> empty .)
    MINUS           reduce using rule 166 (M_quad -> empty .)
    BITNOT          reduce using rule 166 (M_quad -> empty .)
    BITCOMP         reduce using rule 166 (M_quad -> empty .)
    ICONST          reduce using rule 166 (M_quad -> empty .)
    DCONST          reduce using rule 166 (M_quad -> empty .)
    TRUE            reduce using rule 166 (M_quad -> empty .)
    FALSE           reduce using rule 166 (M_quad -> empty .)
    CCONST          reduce using rule 166 (M_quad -> empty .)
    SCONST          reduce using rule 166 (M_quad -> empty .)
    OPEN_PAREN      reduce using rule 166 (M_quad -> empty .)
    NEW             reduce using rule 166 (M_quad -> empty .)


state 109

    (180) do-statement -> DO M_quad . block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 202

state 110

    (103) assignment-operator -> DIVEQUAL .

    IDENTIFIER      reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    PLUS            reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    MINUS           reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    BITNOT          reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    BITCOMP         reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    ICONST          reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    DCONST          reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    TRUE            reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    FALSE           reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    CCONST          reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    SCONST          reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    OPEN_PAREN      reduce using rule 103 (assignment-operator -> DIVEQUAL .)
    NEW             reduce using rule 103 (assignment-operator -> DIVEQUAL .)


state 111

    (109) assignment-operator -> RSHIFTEQUAL .

    IDENTIFIER      reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    BITNOT          reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    BITCOMP         reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    DCONST          reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    TRUE            reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    FALSE           reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    CCONST          reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    SCONST          reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)
    NEW             reduce using rule 109 (assignment-operator -> RSHIFTEQUAL .)


state 112

    (97) assignment -> member-access assignment-operator . expression
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    conditional-or-expression      shift and go to state 172
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    expression                     shift and go to state 203
    parenthesized-expression       shift and go to state 178

state 113

    (102) assignment-operator -> TIMESEQUAL .

    IDENTIFIER      reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    PLUS            reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    MINUS           reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    BITNOT          reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    BITCOMP         reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    ICONST          reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    DCONST          reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    TRUE            reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    FALSE           reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    CCONST          reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    SCONST          reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    OPEN_PAREN      reduce using rule 102 (assignment-operator -> TIMESEQUAL .)
    NEW             reduce using rule 102 (assignment-operator -> TIMESEQUAL .)


state 114

    (101) assignment-operator -> MINUSEQUAL .

    IDENTIFIER      reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    PLUS            reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    MINUS           reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    BITNOT          reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    BITCOMP         reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    ICONST          reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    DCONST          reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    TRUE            reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    FALSE           reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    CCONST          reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    SCONST          reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    OPEN_PAREN      reduce using rule 101 (assignment-operator -> MINUSEQUAL .)
    NEW             reduce using rule 101 (assignment-operator -> MINUSEQUAL .)


state 115

    (95) element-access -> member-access OPEN_BRACKET . expression CLOSE_BRACKET
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 204
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 116

    (106) assignment-operator -> BITOREQUAL .

    IDENTIFIER      reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    PLUS            reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    MINUS           reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    BITNOT          reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    BITCOMP         reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    ICONST          reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    DCONST          reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    TRUE            reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    FALSE           reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    CCONST          reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    SCONST          reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    OPEN_PAREN      reduce using rule 106 (assignment-operator -> BITOREQUAL .)
    NEW             reduce using rule 106 (assignment-operator -> BITOREQUAL .)


state 117

    (100) assignment-operator -> PLUSEQUAL .

    IDENTIFIER      reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    PLUS            reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    MINUS           reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    BITNOT          reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    BITCOMP         reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    ICONST          reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    DCONST          reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    TRUE            reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    FALSE           reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    CCONST          reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    SCONST          reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    OPEN_PAREN      reduce using rule 100 (assignment-operator -> PLUSEQUAL .)
    NEW             reduce using rule 100 (assignment-operator -> PLUSEQUAL .)


state 118

    (107) assignment-operator -> BITXOREQUAL .

    IDENTIFIER      reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    PLUS            reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    MINUS           reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    BITNOT          reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    BITCOMP         reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    ICONST          reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    DCONST          reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    TRUE            reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    FALSE           reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    CCONST          reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    SCONST          reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    OPEN_PAREN      reduce using rule 107 (assignment-operator -> BITXOREQUAL .)
    NEW             reduce using rule 107 (assignment-operator -> BITXOREQUAL .)


state 119

    (105) assignment-operator -> BITANDEQUAL .

    IDENTIFIER      reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    PLUS            reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    MINUS           reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    BITNOT          reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    BITCOMP         reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    ICONST          reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    DCONST          reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    TRUE            reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    FALSE           reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    CCONST          reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    SCONST          reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    OPEN_PAREN      reduce using rule 105 (assignment-operator -> BITANDEQUAL .)
    NEW             reduce using rule 105 (assignment-operator -> BITANDEQUAL .)


state 120

    (108) assignment-operator -> LSHIFTEQUAL .

    IDENTIFIER      reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    BITNOT          reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    BITCOMP         reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    DCONST          reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    TRUE            reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    FALSE           reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    CCONST          reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    SCONST          reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    OPEN_PAREN      reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)
    NEW             reduce using rule 108 (assignment-operator -> LSHIFTEQUAL .)


state 121

    (99) assignment-operator -> ASSIGN .

    IDENTIFIER      reduce using rule 99 (assignment-operator -> ASSIGN .)
    PLUS            reduce using rule 99 (assignment-operator -> ASSIGN .)
    MINUS           reduce using rule 99 (assignment-operator -> ASSIGN .)
    BITNOT          reduce using rule 99 (assignment-operator -> ASSIGN .)
    BITCOMP         reduce using rule 99 (assignment-operator -> ASSIGN .)
    ICONST          reduce using rule 99 (assignment-operator -> ASSIGN .)
    DCONST          reduce using rule 99 (assignment-operator -> ASSIGN .)
    TRUE            reduce using rule 99 (assignment-operator -> ASSIGN .)
    FALSE           reduce using rule 99 (assignment-operator -> ASSIGN .)
    CCONST          reduce using rule 99 (assignment-operator -> ASSIGN .)
    SCONST          reduce using rule 99 (assignment-operator -> ASSIGN .)
    OPEN_PAREN      reduce using rule 99 (assignment-operator -> ASSIGN .)
    NEW             reduce using rule 99 (assignment-operator -> ASSIGN .)


state 122

    (104) assignment-operator -> MODEQUAL .

    IDENTIFIER      reduce using rule 104 (assignment-operator -> MODEQUAL .)
    PLUS            reduce using rule 104 (assignment-operator -> MODEQUAL .)
    MINUS           reduce using rule 104 (assignment-operator -> MODEQUAL .)
    BITNOT          reduce using rule 104 (assignment-operator -> MODEQUAL .)
    BITCOMP         reduce using rule 104 (assignment-operator -> MODEQUAL .)
    ICONST          reduce using rule 104 (assignment-operator -> MODEQUAL .)
    DCONST          reduce using rule 104 (assignment-operator -> MODEQUAL .)
    TRUE            reduce using rule 104 (assignment-operator -> MODEQUAL .)
    FALSE           reduce using rule 104 (assignment-operator -> MODEQUAL .)
    CCONST          reduce using rule 104 (assignment-operator -> MODEQUAL .)
    SCONST          reduce using rule 104 (assignment-operator -> MODEQUAL .)
    OPEN_PAREN      reduce using rule 104 (assignment-operator -> MODEQUAL .)
    NEW             reduce using rule 104 (assignment-operator -> MODEQUAL .)


state 123

    (129) block -> BLOCK_BEGIN M_bstart . statement-list-opt BLOCK_END
    (131) statement-list-opt -> . statement-list
    (132) statement-list-opt -> . empty
    (133) statement-list -> . statement
    (134) statement-list -> . statement-list statement
    (205) empty -> .
    (135) statement -> . labeled-statement
    (136) statement -> . declaration-statement
    (137) statement -> . block
    (138) statement -> . empty-statement
    (139) statement -> . expression-statement
    (140) statement -> . selection-statement
    (141) statement -> . iteration-statement
    (142) statement -> . jump-statement
    (143) statement -> . write-statement
    (144) statement -> . read-statement
    (145) statement -> . method-declaration
    (150) labeled-statement -> . IDENTIFIER COLON statement
    (151) declaration-statement -> . local-variable-declaration DELIM
    (152) declaration-statement -> . local-constant-declaration DELIM
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (155) empty-statement -> . DELIM
    (156) expression-statement -> . statement-expression DELIM
    (159) selection-statement -> . if-statement
    (160) selection-statement -> . switch-statement
    (175) iteration-statement -> . while-statement M_quad
    (176) iteration-statement -> . for-statement M_quad
    (177) iteration-statement -> . do-statement M_quad
    (192) jump-statement -> . break-statement
    (193) jump-statement -> . continue-statement
    (194) jump-statement -> . return-statement
    (146) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (149) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (118) method-declaration -> . method-header method-body
    (153) local-variable-declaration -> . type variable-declarators
    (154) local-constant-declaration -> . CONST simple-type constant-declarators
    (157) statement-expression -> . invocation-expression
    (158) statement-expression -> . assignment
    (161) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (162) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (167) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (178) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (181) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (180) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (195) break-statement -> . BREAK DELIM
    (196) continue-statement -> . CONTINUE DELIM
    (197) return-statement -> . RETURN expression DELIM
    (198) return-statement -> . RETURN DELIM
    (119) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 205 (empty -> .)
    IDENTIFIER      shift and go to state 72
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 76
    CONST           shift and go to state 62
    IF              shift and go to state 84
    SWITCH          shift and go to state 94
    WHILE           shift and go to state 58
    FOR             shift and go to state 77
    DO              shift and go to state 52
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 61
    RETURN          shift and go to state 85
    VOID            shift and go to state 17
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21

    return-statement               shift and go to state 53
    method-header                  shift and go to state 16
    write-statement                shift and go to state 54
    member-access                  shift and go to state 55
    selection-statement            shift and go to state 56
    empty-statement                shift and go to state 59
    statement-list-opt             shift and go to state 205
    expression-statement           shift and go to state 63
    break-statement                shift and go to state 64
    statement-expression           shift and go to state 83
    element-access                 shift and go to state 66
    method-declaration             shift and go to state 67
    local-constant-declaration     shift and go to state 68
    statement                      shift and go to state 69
    assignment                     shift and go to state 70
    for-statement                  shift and go to state 71
    type                           shift and go to state 73
    read-statement                 shift and go to state 74
    do-statement                   shift and go to state 75
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 79
    labeled-statement              shift and go to state 80
    declaration-statement          shift and go to state 81
    switch-statement               shift and go to state 82
    iteration-statement            shift and go to state 86
    jump-statement                 shift and go to state 87
    local-variable-declaration     shift and go to state 88
    if-statement                   shift and go to state 90
    empty                          shift and go to state 91
    statement-list                 shift and go to state 92
    class-type                     shift and go to state 34
    while-statement                shift and go to state 93
    simple-type                    shift and go to state 19
    block                          shift and go to state 95

state 124

    (130) M_bstart -> empty .

    IDENTIFIER      reduce using rule 130 (M_bstart -> empty .)
    BLOCK_BEGIN     reduce using rule 130 (M_bstart -> empty .)
    DELIM           reduce using rule 130 (M_bstart -> empty .)
    CONSOLE         reduce using rule 130 (M_bstart -> empty .)
    CONST           reduce using rule 130 (M_bstart -> empty .)
    IF              reduce using rule 130 (M_bstart -> empty .)
    SWITCH          reduce using rule 130 (M_bstart -> empty .)
    WHILE           reduce using rule 130 (M_bstart -> empty .)
    FOR             reduce using rule 130 (M_bstart -> empty .)
    DO              reduce using rule 130 (M_bstart -> empty .)
    BREAK           reduce using rule 130 (M_bstart -> empty .)
    CONTINUE        reduce using rule 130 (M_bstart -> empty .)
    RETURN          reduce using rule 130 (M_bstart -> empty .)
    VOID            reduce using rule 130 (M_bstart -> empty .)
    BOOL            reduce using rule 130 (M_bstart -> empty .)
    INT             reduce using rule 130 (M_bstart -> empty .)
    CHAR            reduce using rule 130 (M_bstart -> empty .)
    STRING          reduce using rule 130 (M_bstart -> empty .)
    BLOCK_END       reduce using rule 130 (M_bstart -> empty .)
    CASE            reduce using rule 130 (M_bstart -> empty .)
    DEFAULT         reduce using rule 130 (M_bstart -> empty .)


state 125

    (178) while-statement -> WHILE M_quad . OPEN_PAREN expression CLOSE_PAREN M_while block

    OPEN_PAREN      shift and go to state 206


state 126

    (128) method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .

    CONST           reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PUBLIC          reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    PRIVATE         reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    VOID            reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    INT             reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    STRING          reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    IDENTIFIER      reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONSOLE         reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    IF              reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    FOR             reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DO              reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    CASE            reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 128 (method-block -> BLOCK_BEGIN statement-list-opt BLOCK_END .)


state 127

    (196) continue-statement -> CONTINUE DELIM .

    IDENTIFIER      reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    BLOCK_BEGIN     reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    DELIM           reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    CONSOLE         reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    CONST           reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    IF              reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    SWITCH          reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    WHILE           reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    FOR             reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    DO              reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    BREAK           reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    CONTINUE        reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    RETURN          reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    VOID            reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    BOOL            reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    INT             reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    CHAR            reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    STRING          reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    BLOCK_END       reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    CASE            reduce using rule 196 (continue-statement -> CONTINUE DELIM .)
    DEFAULT         reduce using rule 196 (continue-statement -> CONTINUE DELIM .)


state 128

    (154) local-constant-declaration -> CONST simple-type . constant-declarators
    (30) constant-declarators -> . constant-declarator
    (31) constant-declarators -> . constant-declarators COMMA constant-declarator
    (32) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 99

    constant-declarators           shift and go to state 207
    constant-declarator            shift and go to state 100

state 129

    (98) assignment -> element-access assignment-operator . expression
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    conditional-or-expression      shift and go to state 172
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    expression                     shift and go to state 208
    parenthesized-expression       shift and go to state 178

state 130

    (152) declaration-statement -> local-constant-declaration DELIM .

    IDENTIFIER      reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    DELIM           reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    CONSOLE         reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    CONST           reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    IF              reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    SWITCH          reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    WHILE           reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    FOR             reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    DO              reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    BREAK           reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    CONTINUE        reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    RETURN          reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    VOID            reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    BOOL            reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    INT             reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    CHAR            reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    STRING          reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    BLOCK_END       reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    CASE            reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)
    DEFAULT         reduce using rule 152 (declaration-statement -> local-constant-declaration DELIM .)


state 131

    (176) iteration-statement -> for-statement M_quad .

    IDENTIFIER      reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    DELIM           reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    CONSOLE         reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    CONST           reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    IF              reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    SWITCH          reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    WHILE           reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    FOR             reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    DO              reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    BREAK           reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    CONTINUE        reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    RETURN          reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    VOID            reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    BOOL            reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    INT             reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    CHAR            reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    STRING          reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    BLOCK_END       reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    CASE            reduce using rule 176 (iteration-statement -> for-statement M_quad .)
    DEFAULT         reduce using rule 176 (iteration-statement -> for-statement M_quad .)


state 132

    (91) invocation-expression -> IDENTIFIER DOT . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (89) member-access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 209


state 133

    (94) element-access -> IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    conditional-or-expression      shift and go to state 172
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    expression                     shift and go to state 210
    parenthesized-expression       shift and go to state 178

state 134

    (90) invocation-expression -> IDENTIFIER OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (92) argument-list-opt -> . expression-list
    (93) argument-list-opt -> . empty
    (73) expression-list -> . expression
    (74) expression-list -> . expression-list COMMA expression
    (205) empty -> .
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 205 (empty -> .)
    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    argument-list-opt              shift and go to state 211
    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    equality-expression            shift and go to state 166
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    expression-list                shift and go to state 213
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 214
    empty                          shift and go to state 212
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 135

    (150) labeled-statement -> IDENTIFIER COLON . statement
    (135) statement -> . labeled-statement
    (136) statement -> . declaration-statement
    (137) statement -> . block
    (138) statement -> . empty-statement
    (139) statement -> . expression-statement
    (140) statement -> . selection-statement
    (141) statement -> . iteration-statement
    (142) statement -> . jump-statement
    (143) statement -> . write-statement
    (144) statement -> . read-statement
    (145) statement -> . method-declaration
    (150) labeled-statement -> . IDENTIFIER COLON statement
    (151) declaration-statement -> . local-variable-declaration DELIM
    (152) declaration-statement -> . local-constant-declaration DELIM
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (155) empty-statement -> . DELIM
    (156) expression-statement -> . statement-expression DELIM
    (159) selection-statement -> . if-statement
    (160) selection-statement -> . switch-statement
    (175) iteration-statement -> . while-statement M_quad
    (176) iteration-statement -> . for-statement M_quad
    (177) iteration-statement -> . do-statement M_quad
    (192) jump-statement -> . break-statement
    (193) jump-statement -> . continue-statement
    (194) jump-statement -> . return-statement
    (146) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (149) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (118) method-declaration -> . method-header method-body
    (153) local-variable-declaration -> . type variable-declarators
    (154) local-constant-declaration -> . CONST simple-type constant-declarators
    (157) statement-expression -> . invocation-expression
    (158) statement-expression -> . assignment
    (161) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (162) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (167) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (178) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (181) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (180) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (195) break-statement -> . BREAK DELIM
    (196) continue-statement -> . CONTINUE DELIM
    (197) return-statement -> . RETURN expression DELIM
    (198) return-statement -> . RETURN DELIM
    (119) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 72
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 76
    CONST           shift and go to state 62
    IF              shift and go to state 84
    SWITCH          shift and go to state 94
    WHILE           shift and go to state 58
    FOR             shift and go to state 77
    DO              shift and go to state 52
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 61
    RETURN          shift and go to state 85
    VOID            shift and go to state 17
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21

    return-statement               shift and go to state 53
    method-header                  shift and go to state 16
    write-statement                shift and go to state 54
    member-access                  shift and go to state 55
    selection-statement            shift and go to state 56
    empty-statement                shift and go to state 59
    expression-statement           shift and go to state 63
    break-statement                shift and go to state 64
    method-declaration             shift and go to state 67
    element-access                 shift and go to state 66
    statement-expression           shift and go to state 83
    local-constant-declaration     shift and go to state 68
    statement                      shift and go to state 215
    assignment                     shift and go to state 70
    for-statement                  shift and go to state 71
    type                           shift and go to state 73
    read-statement                 shift and go to state 74
    do-statement                   shift and go to state 75
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 79
    labeled-statement              shift and go to state 80
    declaration-statement          shift and go to state 81
    switch-statement               shift and go to state 82
    iteration-statement            shift and go to state 86
    jump-statement                 shift and go to state 87
    local-variable-declaration     shift and go to state 88
    if-statement                   shift and go to state 90
    class-type                     shift and go to state 34
    while-statement                shift and go to state 93
    simple-type                    shift and go to state 19
    block                          shift and go to state 95

state 136

    (96) assignment -> IDENTIFIER assignment-operator . expression
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    conditional-or-expression      shift and go to state 172
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    expression                     shift and go to state 216
    parenthesized-expression       shift and go to state 178

state 137

    (153) local-variable-declaration -> type variable-declarators .
    (115) variable-declarators -> variable-declarators . COMMA variable-declarator

    DELIM           reduce using rule 153 (local-variable-declaration -> type variable-declarators .)
    COMMA           shift and go to state 102


state 138

    (177) iteration-statement -> do-statement M_quad .

    IDENTIFIER      reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    DELIM           reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    CONSOLE         reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    CONST           reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    IF              reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    SWITCH          reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    WHILE           reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    FOR             reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    DO              reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    BREAK           reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    CONTINUE        reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    RETURN          reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    VOID            reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    BOOL            reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    INT             reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    CHAR            reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    STRING          reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    BLOCK_END       reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    CASE            reduce using rule 177 (iteration-statement -> do-statement M_quad .)
    DEFAULT         reduce using rule 177 (iteration-statement -> do-statement M_quad .)


state 139

    (146) write-statement -> CONSOLE DOT . WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (149) read-statement -> CONSOLE DOT . READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    WRITELINE       shift and go to state 217
    READLINE        shift and go to state 218


state 140

    (181) for-statement -> FOR OPEN_PAREN . for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (182) for-initializer-opt -> . for-initializer
    (183) for-initializer-opt -> . empty
    (184) for-initializer -> . statement-expression-list
    (205) empty -> .
    (190) statement-expression-list -> . statement-expression
    (191) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (157) statement-expression -> . invocation-expression
    (158) statement-expression -> . assignment
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    DELIM           reduce using rule 205 (empty -> .)
    IDENTIFIER      shift and go to state 222

    for-initializer                shift and go to state 219
    assignment                     shift and go to state 70
    member-access                  shift and go to state 55
    element-access                 shift and go to state 66
    statement-expression           shift and go to state 220
    empty                          shift and go to state 223
    invocation-expression          shift and go to state 79
    statement-expression-list      shift and go to state 221
    for-initializer-opt            shift and go to state 224

state 141

    (156) expression-statement -> statement-expression DELIM .

    IDENTIFIER      reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    BLOCK_BEGIN     reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    DELIM           reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    CONSOLE         reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    CONST           reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    IF              reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    SWITCH          reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    WHILE           reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    FOR             reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    DO              reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    BREAK           reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    CONTINUE        reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    RETURN          reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    VOID            reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    BOOL            reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    INT             reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    CHAR            reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    STRING          reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    BLOCK_END       reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    CASE            reduce using rule 156 (expression-statement -> statement-expression DELIM .)
    DEFAULT         reduce using rule 156 (expression-statement -> statement-expression DELIM .)


state 142

    (161) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block
    (162) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> IF OPEN_PAREN . expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 225
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 143

    (63) multiplicative-expression -> unary-expression .

    TIMES           reduce using rule 63 (multiplicative-expression -> unary-expression .)
    DIV             reduce using rule 63 (multiplicative-expression -> unary-expression .)
    MOD             reduce using rule 63 (multiplicative-expression -> unary-expression .)
    PLUS            reduce using rule 63 (multiplicative-expression -> unary-expression .)
    MINUS           reduce using rule 63 (multiplicative-expression -> unary-expression .)
    LSHIFT          reduce using rule 63 (multiplicative-expression -> unary-expression .)
    RSHIFT          reduce using rule 63 (multiplicative-expression -> unary-expression .)
    LT              reduce using rule 63 (multiplicative-expression -> unary-expression .)
    GT              reduce using rule 63 (multiplicative-expression -> unary-expression .)
    LE              reduce using rule 63 (multiplicative-expression -> unary-expression .)
    GE              reduce using rule 63 (multiplicative-expression -> unary-expression .)
    EQ              reduce using rule 63 (multiplicative-expression -> unary-expression .)
    NE              reduce using rule 63 (multiplicative-expression -> unary-expression .)
    BITAND          reduce using rule 63 (multiplicative-expression -> unary-expression .)
    BITXOR          reduce using rule 63 (multiplicative-expression -> unary-expression .)
    BITOR           reduce using rule 63 (multiplicative-expression -> unary-expression .)
    LOGAND          reduce using rule 63 (multiplicative-expression -> unary-expression .)
    CONDOP          reduce using rule 63 (multiplicative-expression -> unary-expression .)
    LOGOR           reduce using rule 63 (multiplicative-expression -> unary-expression .)
    DELIM           reduce using rule 63 (multiplicative-expression -> unary-expression .)
    CLOSE_BRACKET   reduce using rule 63 (multiplicative-expression -> unary-expression .)
    COMMA           reduce using rule 63 (multiplicative-expression -> unary-expression .)
    CLOSE_PAREN     reduce using rule 63 (multiplicative-expression -> unary-expression .)
    BLOCK_END       reduce using rule 63 (multiplicative-expression -> unary-expression .)
    COLON           reduce using rule 63 (multiplicative-expression -> unary-expression .)


state 144

    (43) inclusive-or-expression -> exclusive-or-expression .
    (46) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    LOGAND          reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    CONDOP          reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    LOGOR           reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    DELIM           reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    COMMA           reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    BLOCK_END       reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    COLON           reduce using rule 43 (inclusive-or-expression -> exclusive-or-expression .)
    BITXOR          shift and go to state 226


state 145

    (97) assignment -> member-access . assignment-operator expression
    (95) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET
    (84) primary-no-array-creation-expression -> member-access .
    (99) assignment-operator -> . ASSIGN
    (100) assignment-operator -> . PLUSEQUAL
    (101) assignment-operator -> . MINUSEQUAL
    (102) assignment-operator -> . TIMESEQUAL
    (103) assignment-operator -> . DIVEQUAL
    (104) assignment-operator -> . MODEQUAL
    (105) assignment-operator -> . BITANDEQUAL
    (106) assignment-operator -> . BITOREQUAL
    (107) assignment-operator -> . BITXOREQUAL
    (108) assignment-operator -> . LSHIFTEQUAL
    (109) assignment-operator -> . RSHIFTEQUAL

    OPEN_BRACKET    shift and go to state 115
    TIMES           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    ASSIGN          shift and go to state 121
    PLUSEQUAL       shift and go to state 117
    MINUSEQUAL      shift and go to state 114
    TIMESEQUAL      shift and go to state 113
    DIVEQUAL        shift and go to state 110
    MODEQUAL        shift and go to state 122
    BITANDEQUAL     shift and go to state 119
    BITOREQUAL      shift and go to state 116
    BITXOREQUAL     shift and go to state 118
    LSHIFTEQUAL     shift and go to state 120
    RSHIFTEQUAL     shift and go to state 111

    assignment-operator            shift and go to state 112

state 146

    (49) equality-expression -> relational-expression .
    (53) relational-expression -> relational-expression . LT shift-expression
    (54) relational-expression -> relational-expression . GT shift-expression
    (55) relational-expression -> relational-expression . LE shift-expression
    (56) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 49 (equality-expression -> relational-expression .)
    NE              reduce using rule 49 (equality-expression -> relational-expression .)
    BITAND          reduce using rule 49 (equality-expression -> relational-expression .)
    BITXOR          reduce using rule 49 (equality-expression -> relational-expression .)
    BITOR           reduce using rule 49 (equality-expression -> relational-expression .)
    LOGAND          reduce using rule 49 (equality-expression -> relational-expression .)
    CONDOP          reduce using rule 49 (equality-expression -> relational-expression .)
    LOGOR           reduce using rule 49 (equality-expression -> relational-expression .)
    DELIM           reduce using rule 49 (equality-expression -> relational-expression .)
    COMMA           reduce using rule 49 (equality-expression -> relational-expression .)
    CLOSE_PAREN     reduce using rule 49 (equality-expression -> relational-expression .)
    CLOSE_BRACKET   reduce using rule 49 (equality-expression -> relational-expression .)
    BLOCK_END       reduce using rule 49 (equality-expression -> relational-expression .)
    COLON           reduce using rule 49 (equality-expression -> relational-expression .)
    LT              shift and go to state 229
    GT              shift and go to state 230
    LE              shift and go to state 227
    GE              shift and go to state 228


state 147

    (200) literal -> DCONST .

    TIMES           reduce using rule 200 (literal -> DCONST .)
    DIV             reduce using rule 200 (literal -> DCONST .)
    MOD             reduce using rule 200 (literal -> DCONST .)
    PLUS            reduce using rule 200 (literal -> DCONST .)
    MINUS           reduce using rule 200 (literal -> DCONST .)
    LSHIFT          reduce using rule 200 (literal -> DCONST .)
    RSHIFT          reduce using rule 200 (literal -> DCONST .)
    LT              reduce using rule 200 (literal -> DCONST .)
    GT              reduce using rule 200 (literal -> DCONST .)
    LE              reduce using rule 200 (literal -> DCONST .)
    GE              reduce using rule 200 (literal -> DCONST .)
    EQ              reduce using rule 200 (literal -> DCONST .)
    NE              reduce using rule 200 (literal -> DCONST .)
    BITAND          reduce using rule 200 (literal -> DCONST .)
    BITXOR          reduce using rule 200 (literal -> DCONST .)
    BITOR           reduce using rule 200 (literal -> DCONST .)
    LOGAND          reduce using rule 200 (literal -> DCONST .)
    CONDOP          reduce using rule 200 (literal -> DCONST .)
    LOGOR           reduce using rule 200 (literal -> DCONST .)
    DELIM           reduce using rule 200 (literal -> DCONST .)
    COMMA           reduce using rule 200 (literal -> DCONST .)
    CLOSE_BRACKET   reduce using rule 200 (literal -> DCONST .)
    CLOSE_PAREN     reduce using rule 200 (literal -> DCONST .)
    BLOCK_END       reduce using rule 200 (literal -> DCONST .)
    COLON           reduce using rule 200 (literal -> DCONST .)


state 148

    (87) object-creation-expression -> NEW . class-type OPEN_PAREN argument-list-opt CLOSE_PAREN
    (11) class-type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 31

    class-type                     shift and go to state 231

state 149

    (57) shift-expression -> additive-expression .
    (61) additive-expression -> additive-expression . PLUS multiplicative-expression
    (62) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 57 (shift-expression -> additive-expression .)
    RSHIFT          reduce using rule 57 (shift-expression -> additive-expression .)
    LT              reduce using rule 57 (shift-expression -> additive-expression .)
    GT              reduce using rule 57 (shift-expression -> additive-expression .)
    LE              reduce using rule 57 (shift-expression -> additive-expression .)
    GE              reduce using rule 57 (shift-expression -> additive-expression .)
    EQ              reduce using rule 57 (shift-expression -> additive-expression .)
    NE              reduce using rule 57 (shift-expression -> additive-expression .)
    BITAND          reduce using rule 57 (shift-expression -> additive-expression .)
    BITXOR          reduce using rule 57 (shift-expression -> additive-expression .)
    BITOR           reduce using rule 57 (shift-expression -> additive-expression .)
    LOGAND          reduce using rule 57 (shift-expression -> additive-expression .)
    CONDOP          reduce using rule 57 (shift-expression -> additive-expression .)
    LOGOR           reduce using rule 57 (shift-expression -> additive-expression .)
    CLOSE_BRACKET   reduce using rule 57 (shift-expression -> additive-expression .)
    DELIM           reduce using rule 57 (shift-expression -> additive-expression .)
    COMMA           reduce using rule 57 (shift-expression -> additive-expression .)
    CLOSE_PAREN     reduce using rule 57 (shift-expression -> additive-expression .)
    BLOCK_END       reduce using rule 57 (shift-expression -> additive-expression .)
    COLON           reduce using rule 57 (shift-expression -> additive-expression .)
    PLUS            shift and go to state 232
    MINUS           shift and go to state 233


state 150

    (69) unary-expression -> MINUS . unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 235
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 151

    (41) conditional-and-expression -> inclusive-or-expression .
    (44) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 41 (conditional-and-expression -> inclusive-or-expression .)
    CONDOP          reduce using rule 41 (conditional-and-expression -> inclusive-or-expression .)
    LOGOR           reduce using rule 41 (conditional-and-expression -> inclusive-or-expression .)
    COLON           reduce using rule 41 (conditional-and-expression -> inclusive-or-expression .)
    COMMA           reduce using rule 41 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 41 (conditional-and-expression -> inclusive-or-expression .)
    BLOCK_END       reduce using rule 41 (conditional-and-expression -> inclusive-or-expression .)
    DELIM           reduce using rule 41 (conditional-and-expression -> inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 41 (conditional-and-expression -> inclusive-or-expression .)
    BITOR           shift and go to state 238


state 152

    (198) return-statement -> RETURN DELIM .

    IDENTIFIER      reduce using rule 198 (return-statement -> RETURN DELIM .)
    BLOCK_BEGIN     reduce using rule 198 (return-statement -> RETURN DELIM .)
    DELIM           reduce using rule 198 (return-statement -> RETURN DELIM .)
    CONSOLE         reduce using rule 198 (return-statement -> RETURN DELIM .)
    CONST           reduce using rule 198 (return-statement -> RETURN DELIM .)
    IF              reduce using rule 198 (return-statement -> RETURN DELIM .)
    SWITCH          reduce using rule 198 (return-statement -> RETURN DELIM .)
    WHILE           reduce using rule 198 (return-statement -> RETURN DELIM .)
    FOR             reduce using rule 198 (return-statement -> RETURN DELIM .)
    DO              reduce using rule 198 (return-statement -> RETURN DELIM .)
    BREAK           reduce using rule 198 (return-statement -> RETURN DELIM .)
    CONTINUE        reduce using rule 198 (return-statement -> RETURN DELIM .)
    RETURN          reduce using rule 198 (return-statement -> RETURN DELIM .)
    VOID            reduce using rule 198 (return-statement -> RETURN DELIM .)
    BOOL            reduce using rule 198 (return-statement -> RETURN DELIM .)
    INT             reduce using rule 198 (return-statement -> RETURN DELIM .)
    CHAR            reduce using rule 198 (return-statement -> RETURN DELIM .)
    STRING          reduce using rule 198 (return-statement -> RETURN DELIM .)
    BLOCK_END       reduce using rule 198 (return-statement -> RETURN DELIM .)
    CASE            reduce using rule 198 (return-statement -> RETURN DELIM .)
    DEFAULT         reduce using rule 198 (return-statement -> RETURN DELIM .)


state 153

    (204) literal -> SCONST .

    TIMES           reduce using rule 204 (literal -> SCONST .)
    DIV             reduce using rule 204 (literal -> SCONST .)
    MOD             reduce using rule 204 (literal -> SCONST .)
    PLUS            reduce using rule 204 (literal -> SCONST .)
    MINUS           reduce using rule 204 (literal -> SCONST .)
    LSHIFT          reduce using rule 204 (literal -> SCONST .)
    RSHIFT          reduce using rule 204 (literal -> SCONST .)
    LT              reduce using rule 204 (literal -> SCONST .)
    GT              reduce using rule 204 (literal -> SCONST .)
    LE              reduce using rule 204 (literal -> SCONST .)
    GE              reduce using rule 204 (literal -> SCONST .)
    EQ              reduce using rule 204 (literal -> SCONST .)
    NE              reduce using rule 204 (literal -> SCONST .)
    BITAND          reduce using rule 204 (literal -> SCONST .)
    BITXOR          reduce using rule 204 (literal -> SCONST .)
    BITOR           reduce using rule 204 (literal -> SCONST .)
    LOGAND          reduce using rule 204 (literal -> SCONST .)
    CONDOP          reduce using rule 204 (literal -> SCONST .)
    LOGOR           reduce using rule 204 (literal -> SCONST .)
    DELIM           reduce using rule 204 (literal -> SCONST .)
    COMMA           reduce using rule 204 (literal -> SCONST .)
    CLOSE_BRACKET   reduce using rule 204 (literal -> SCONST .)
    CLOSE_PAREN     reduce using rule 204 (literal -> SCONST .)
    BLOCK_END       reduce using rule 204 (literal -> SCONST .)
    COLON           reduce using rule 204 (literal -> SCONST .)


state 154

    (71) unary-expression -> BITCOMP . unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 239
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 155

    (98) assignment -> element-access . assignment-operator expression
    (82) primary-no-array-creation-expression -> element-access .
    (99) assignment-operator -> . ASSIGN
    (100) assignment-operator -> . PLUSEQUAL
    (101) assignment-operator -> . MINUSEQUAL
    (102) assignment-operator -> . TIMESEQUAL
    (103) assignment-operator -> . DIVEQUAL
    (104) assignment-operator -> . MODEQUAL
    (105) assignment-operator -> . BITANDEQUAL
    (106) assignment-operator -> . BITOREQUAL
    (107) assignment-operator -> . BITXOREQUAL
    (108) assignment-operator -> . LSHIFTEQUAL
    (109) assignment-operator -> . RSHIFTEQUAL

    TIMES           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    ASSIGN          shift and go to state 121
    PLUSEQUAL       shift and go to state 117
    MINUSEQUAL      shift and go to state 114
    TIMESEQUAL      shift and go to state 113
    DIVEQUAL        shift and go to state 110
    MODEQUAL        shift and go to state 122
    BITANDEQUAL     shift and go to state 119
    BITOREQUAL      shift and go to state 116
    BITXOREQUAL     shift and go to state 118
    LSHIFTEQUAL     shift and go to state 120
    RSHIFTEQUAL     shift and go to state 111

    assignment-operator            shift and go to state 129

state 156

    (88) parenthesized-expression -> OPEN_PAREN . expression CLOSE_PAREN
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    conditional-or-expression      shift and go to state 172
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    expression                     shift and go to state 240
    parenthesized-expression       shift and go to state 178

state 157

    (33) expression -> conditional-expression .

    CLOSE_PAREN     reduce using rule 33 (expression -> conditional-expression .)
    CLOSE_BRACKET   reduce using rule 33 (expression -> conditional-expression .)
    COMMA           reduce using rule 33 (expression -> conditional-expression .)
    DELIM           reduce using rule 33 (expression -> conditional-expression .)
    BLOCK_END       reduce using rule 33 (expression -> conditional-expression .)
    COLON           reduce using rule 33 (expression -> conditional-expression .)


state 158

    (34) expression -> assignment .

    CLOSE_PAREN     reduce using rule 34 (expression -> assignment .)
    CLOSE_BRACKET   reduce using rule 34 (expression -> assignment .)
    COMMA           reduce using rule 34 (expression -> assignment .)
    DELIM           reduce using rule 34 (expression -> assignment .)
    BLOCK_END       reduce using rule 34 (expression -> assignment .)
    COLON           reduce using rule 34 (expression -> assignment .)


state 159

    (68) unary-expression -> PLUS . unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 241
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 160

    (96) assignment -> IDENTIFIER . assignment-operator expression
    (89) member-access -> IDENTIFIER . DOT IDENTIFIER
    (94) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (81) primary-no-array-creation-expression -> IDENTIFIER .
    (90) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> IDENTIFIER . DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (99) assignment-operator -> . ASSIGN
    (100) assignment-operator -> . PLUSEQUAL
    (101) assignment-operator -> . MINUSEQUAL
    (102) assignment-operator -> . TIMESEQUAL
    (103) assignment-operator -> . DIVEQUAL
    (104) assignment-operator -> . MODEQUAL
    (105) assignment-operator -> . BITANDEQUAL
    (106) assignment-operator -> . BITOREQUAL
    (107) assignment-operator -> . BITXOREQUAL
    (108) assignment-operator -> . LSHIFTEQUAL
    (109) assignment-operator -> . RSHIFTEQUAL

    DOT             shift and go to state 242
    OPEN_BRACKET    shift and go to state 133
    TIMES           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 134
    ASSIGN          shift and go to state 121
    PLUSEQUAL       shift and go to state 117
    MINUSEQUAL      shift and go to state 114
    TIMESEQUAL      shift and go to state 113
    DIVEQUAL        shift and go to state 110
    MODEQUAL        shift and go to state 122
    BITANDEQUAL     shift and go to state 119
    BITOREQUAL      shift and go to state 116
    BITXOREQUAL     shift and go to state 118
    LSHIFTEQUAL     shift and go to state 120
    RSHIFTEQUAL     shift and go to state 111

    assignment-operator            shift and go to state 136

state 161

    (37) conditional-or-expression -> conditional-and-expression .
    (42) conditional-and-expression -> conditional-and-expression . M_and LOGAND inclusive-or-expression
    (40) M_and -> . empty
    (205) empty -> .

    CONDOP          reduce using rule 37 (conditional-or-expression -> conditional-and-expression .)
    LOGOR           reduce using rule 37 (conditional-or-expression -> conditional-and-expression .)
    DELIM           reduce using rule 37 (conditional-or-expression -> conditional-and-expression .)
    COMMA           reduce using rule 37 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 37 (conditional-or-expression -> conditional-and-expression .)
    BLOCK_END       reduce using rule 37 (conditional-or-expression -> conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 37 (conditional-or-expression -> conditional-and-expression .)
    COLON           reduce using rule 37 (conditional-or-expression -> conditional-and-expression .)
    LOGAND          reduce using rule 205 (empty -> .)

    empty                          shift and go to state 243
    M_and                          shift and go to state 244

state 162

    (80) primary-no-array-creation-expression -> literal .

    TIMES           reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    DIV             reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    MOD             reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    PLUS            reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    MINUS           reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    LSHIFT          reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    RSHIFT          reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    LT              reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    GT              reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    LE              reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    GE              reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    EQ              reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    NE              reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    BITAND          reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    BITXOR          reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    BITOR           reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    LOGAND          reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    CONDOP          reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    LOGOR           reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    COLON           reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    COMMA           reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    CLOSE_PAREN     reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    BLOCK_END       reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    DELIM           reduce using rule 80 (primary-no-array-creation-expression -> literal .)
    CLOSE_BRACKET   reduce using rule 80 (primary-no-array-creation-expression -> literal .)


state 163

    (199) literal -> ICONST .

    TIMES           reduce using rule 199 (literal -> ICONST .)
    DIV             reduce using rule 199 (literal -> ICONST .)
    MOD             reduce using rule 199 (literal -> ICONST .)
    PLUS            reduce using rule 199 (literal -> ICONST .)
    MINUS           reduce using rule 199 (literal -> ICONST .)
    LSHIFT          reduce using rule 199 (literal -> ICONST .)
    RSHIFT          reduce using rule 199 (literal -> ICONST .)
    LT              reduce using rule 199 (literal -> ICONST .)
    GT              reduce using rule 199 (literal -> ICONST .)
    LE              reduce using rule 199 (literal -> ICONST .)
    GE              reduce using rule 199 (literal -> ICONST .)
    EQ              reduce using rule 199 (literal -> ICONST .)
    NE              reduce using rule 199 (literal -> ICONST .)
    BITAND          reduce using rule 199 (literal -> ICONST .)
    BITXOR          reduce using rule 199 (literal -> ICONST .)
    BITOR           reduce using rule 199 (literal -> ICONST .)
    LOGAND          reduce using rule 199 (literal -> ICONST .)
    CONDOP          reduce using rule 199 (literal -> ICONST .)
    LOGOR           reduce using rule 199 (literal -> ICONST .)
    DELIM           reduce using rule 199 (literal -> ICONST .)
    COMMA           reduce using rule 199 (literal -> ICONST .)
    CLOSE_BRACKET   reduce using rule 199 (literal -> ICONST .)
    CLOSE_PAREN     reduce using rule 199 (literal -> ICONST .)
    BLOCK_END       reduce using rule 199 (literal -> ICONST .)
    COLON           reduce using rule 199 (literal -> ICONST .)


state 164

    (86) primary-no-array-creation-expression -> object-creation-expression .

    TIMES           reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    DIV             reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    MOD             reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    PLUS            reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    MINUS           reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    LSHIFT          reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    RSHIFT          reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    LT              reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    GT              reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    LE              reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    GE              reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    EQ              reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    NE              reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    BITAND          reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    BITXOR          reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    BITOR           reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGAND          reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    CONDOP          reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    LOGOR           reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    COLON           reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    COMMA           reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_PAREN     reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    BLOCK_END       reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    DELIM           reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)
    CLOSE_BRACKET   reduce using rule 86 (primary-no-array-creation-expression -> object-creation-expression .)


state 165

    (202) literal -> FALSE .

    TIMES           reduce using rule 202 (literal -> FALSE .)
    DIV             reduce using rule 202 (literal -> FALSE .)
    MOD             reduce using rule 202 (literal -> FALSE .)
    PLUS            reduce using rule 202 (literal -> FALSE .)
    MINUS           reduce using rule 202 (literal -> FALSE .)
    LSHIFT          reduce using rule 202 (literal -> FALSE .)
    RSHIFT          reduce using rule 202 (literal -> FALSE .)
    LT              reduce using rule 202 (literal -> FALSE .)
    GT              reduce using rule 202 (literal -> FALSE .)
    LE              reduce using rule 202 (literal -> FALSE .)
    GE              reduce using rule 202 (literal -> FALSE .)
    EQ              reduce using rule 202 (literal -> FALSE .)
    NE              reduce using rule 202 (literal -> FALSE .)
    BITAND          reduce using rule 202 (literal -> FALSE .)
    BITXOR          reduce using rule 202 (literal -> FALSE .)
    BITOR           reduce using rule 202 (literal -> FALSE .)
    LOGAND          reduce using rule 202 (literal -> FALSE .)
    CONDOP          reduce using rule 202 (literal -> FALSE .)
    LOGOR           reduce using rule 202 (literal -> FALSE .)
    DELIM           reduce using rule 202 (literal -> FALSE .)
    COMMA           reduce using rule 202 (literal -> FALSE .)
    CLOSE_BRACKET   reduce using rule 202 (literal -> FALSE .)
    CLOSE_PAREN     reduce using rule 202 (literal -> FALSE .)
    BLOCK_END       reduce using rule 202 (literal -> FALSE .)
    COLON           reduce using rule 202 (literal -> FALSE .)


state 166

    (47) and-expression -> equality-expression .
    (50) equality-expression -> equality-expression . EQ relational-expression
    (51) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 47 (and-expression -> equality-expression .)
    BITXOR          reduce using rule 47 (and-expression -> equality-expression .)
    BITOR           reduce using rule 47 (and-expression -> equality-expression .)
    LOGAND          reduce using rule 47 (and-expression -> equality-expression .)
    CONDOP          reduce using rule 47 (and-expression -> equality-expression .)
    LOGOR           reduce using rule 47 (and-expression -> equality-expression .)
    DELIM           reduce using rule 47 (and-expression -> equality-expression .)
    CLOSE_PAREN     reduce using rule 47 (and-expression -> equality-expression .)
    CLOSE_BRACKET   reduce using rule 47 (and-expression -> equality-expression .)
    COMMA           reduce using rule 47 (and-expression -> equality-expression .)
    BLOCK_END       reduce using rule 47 (and-expression -> equality-expression .)
    COLON           reduce using rule 47 (and-expression -> equality-expression .)
    EQ              shift and go to state 245
    NE              shift and go to state 246


state 167

    (201) literal -> TRUE .

    TIMES           reduce using rule 201 (literal -> TRUE .)
    DIV             reduce using rule 201 (literal -> TRUE .)
    MOD             reduce using rule 201 (literal -> TRUE .)
    PLUS            reduce using rule 201 (literal -> TRUE .)
    MINUS           reduce using rule 201 (literal -> TRUE .)
    LSHIFT          reduce using rule 201 (literal -> TRUE .)
    RSHIFT          reduce using rule 201 (literal -> TRUE .)
    LT              reduce using rule 201 (literal -> TRUE .)
    GT              reduce using rule 201 (literal -> TRUE .)
    LE              reduce using rule 201 (literal -> TRUE .)
    GE              reduce using rule 201 (literal -> TRUE .)
    EQ              reduce using rule 201 (literal -> TRUE .)
    NE              reduce using rule 201 (literal -> TRUE .)
    BITAND          reduce using rule 201 (literal -> TRUE .)
    BITXOR          reduce using rule 201 (literal -> TRUE .)
    BITOR           reduce using rule 201 (literal -> TRUE .)
    LOGAND          reduce using rule 201 (literal -> TRUE .)
    CONDOP          reduce using rule 201 (literal -> TRUE .)
    LOGOR           reduce using rule 201 (literal -> TRUE .)
    DELIM           reduce using rule 201 (literal -> TRUE .)
    COMMA           reduce using rule 201 (literal -> TRUE .)
    CLOSE_BRACKET   reduce using rule 201 (literal -> TRUE .)
    CLOSE_PAREN     reduce using rule 201 (literal -> TRUE .)
    BLOCK_END       reduce using rule 201 (literal -> TRUE .)
    COLON           reduce using rule 201 (literal -> TRUE .)


state 168

    (52) relational-expression -> shift-expression .
    (58) shift-expression -> shift-expression . LSHIFT additive-expression
    (59) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 52 (relational-expression -> shift-expression .)
    GT              reduce using rule 52 (relational-expression -> shift-expression .)
    LE              reduce using rule 52 (relational-expression -> shift-expression .)
    GE              reduce using rule 52 (relational-expression -> shift-expression .)
    EQ              reduce using rule 52 (relational-expression -> shift-expression .)
    NE              reduce using rule 52 (relational-expression -> shift-expression .)
    BITAND          reduce using rule 52 (relational-expression -> shift-expression .)
    BITXOR          reduce using rule 52 (relational-expression -> shift-expression .)
    BITOR           reduce using rule 52 (relational-expression -> shift-expression .)
    LOGAND          reduce using rule 52 (relational-expression -> shift-expression .)
    CONDOP          reduce using rule 52 (relational-expression -> shift-expression .)
    LOGOR           reduce using rule 52 (relational-expression -> shift-expression .)
    DELIM           reduce using rule 52 (relational-expression -> shift-expression .)
    COMMA           reduce using rule 52 (relational-expression -> shift-expression .)
    CLOSE_BRACKET   reduce using rule 52 (relational-expression -> shift-expression .)
    CLOSE_PAREN     reduce using rule 52 (relational-expression -> shift-expression .)
    BLOCK_END       reduce using rule 52 (relational-expression -> shift-expression .)
    COLON           reduce using rule 52 (relational-expression -> shift-expression .)
    LSHIFT          shift and go to state 248
    RSHIFT          shift and go to state 247


state 169

    (45) exclusive-or-expression -> and-expression .
    (48) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 45 (exclusive-or-expression -> and-expression .)
    BITOR           reduce using rule 45 (exclusive-or-expression -> and-expression .)
    LOGAND          reduce using rule 45 (exclusive-or-expression -> and-expression .)
    CONDOP          reduce using rule 45 (exclusive-or-expression -> and-expression .)
    LOGOR           reduce using rule 45 (exclusive-or-expression -> and-expression .)
    COMMA           reduce using rule 45 (exclusive-or-expression -> and-expression .)
    CLOSE_PAREN     reduce using rule 45 (exclusive-or-expression -> and-expression .)
    DELIM           reduce using rule 45 (exclusive-or-expression -> and-expression .)
    CLOSE_BRACKET   reduce using rule 45 (exclusive-or-expression -> and-expression .)
    BLOCK_END       reduce using rule 45 (exclusive-or-expression -> and-expression .)
    COLON           reduce using rule 45 (exclusive-or-expression -> and-expression .)
    BITAND          shift and go to state 249


state 170

    (72) primary-expression -> primary-no-array-creation-expression .

    TIMES           reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    DIV             reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    MOD             reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    PLUS            reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    MINUS           reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    LSHIFT          reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    RSHIFT          reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    LT              reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    GT              reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    LE              reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    GE              reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    EQ              reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    NE              reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    BITAND          reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    BITXOR          reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    BITOR           reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    LOGAND          reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    CONDOP          reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    LOGOR           reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    DELIM           reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    COMMA           reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_BRACKET   reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    CLOSE_PAREN     reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    BLOCK_END       reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)
    COLON           reduce using rule 72 (primary-expression -> primary-no-array-creation-expression .)


state 171

    (60) additive-expression -> multiplicative-expression .
    (64) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (65) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (66) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 60 (additive-expression -> multiplicative-expression .)
    MINUS           reduce using rule 60 (additive-expression -> multiplicative-expression .)
    LSHIFT          reduce using rule 60 (additive-expression -> multiplicative-expression .)
    RSHIFT          reduce using rule 60 (additive-expression -> multiplicative-expression .)
    LT              reduce using rule 60 (additive-expression -> multiplicative-expression .)
    GT              reduce using rule 60 (additive-expression -> multiplicative-expression .)
    LE              reduce using rule 60 (additive-expression -> multiplicative-expression .)
    GE              reduce using rule 60 (additive-expression -> multiplicative-expression .)
    EQ              reduce using rule 60 (additive-expression -> multiplicative-expression .)
    NE              reduce using rule 60 (additive-expression -> multiplicative-expression .)
    BITAND          reduce using rule 60 (additive-expression -> multiplicative-expression .)
    BITXOR          reduce using rule 60 (additive-expression -> multiplicative-expression .)
    BITOR           reduce using rule 60 (additive-expression -> multiplicative-expression .)
    LOGAND          reduce using rule 60 (additive-expression -> multiplicative-expression .)
    CONDOP          reduce using rule 60 (additive-expression -> multiplicative-expression .)
    LOGOR           reduce using rule 60 (additive-expression -> multiplicative-expression .)
    DELIM           reduce using rule 60 (additive-expression -> multiplicative-expression .)
    COMMA           reduce using rule 60 (additive-expression -> multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 60 (additive-expression -> multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 60 (additive-expression -> multiplicative-expression .)
    BLOCK_END       reduce using rule 60 (additive-expression -> multiplicative-expression .)
    COLON           reduce using rule 60 (additive-expression -> multiplicative-expression .)
    TIMES           shift and go to state 252
    DIV             shift and go to state 250
    MOD             shift and go to state 251


state 172

    (35) conditional-expression -> conditional-or-expression .
    (36) conditional-expression -> conditional-or-expression . CONDOP expression COLON expression
    (38) conditional-or-expression -> conditional-or-expression . M_or LOGOR conditional-and-expression
    (39) M_or -> . empty
    (205) empty -> .

    COMMA           reduce using rule 35 (conditional-expression -> conditional-or-expression .)
    CLOSE_PAREN     reduce using rule 35 (conditional-expression -> conditional-or-expression .)
    BLOCK_END       reduce using rule 35 (conditional-expression -> conditional-or-expression .)
    DELIM           reduce using rule 35 (conditional-expression -> conditional-or-expression .)
    COLON           reduce using rule 35 (conditional-expression -> conditional-or-expression .)
    CLOSE_BRACKET   reduce using rule 35 (conditional-expression -> conditional-or-expression .)
    CONDOP          shift and go to state 254
    LOGOR           reduce using rule 205 (empty -> .)

    M_or                           shift and go to state 253
    empty                          shift and go to state 255

state 173

    (70) unary-expression -> BITNOT . unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 256
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 174

    (203) literal -> CCONST .

    TIMES           reduce using rule 203 (literal -> CCONST .)
    DIV             reduce using rule 203 (literal -> CCONST .)
    MOD             reduce using rule 203 (literal -> CCONST .)
    PLUS            reduce using rule 203 (literal -> CCONST .)
    MINUS           reduce using rule 203 (literal -> CCONST .)
    LSHIFT          reduce using rule 203 (literal -> CCONST .)
    RSHIFT          reduce using rule 203 (literal -> CCONST .)
    LT              reduce using rule 203 (literal -> CCONST .)
    GT              reduce using rule 203 (literal -> CCONST .)
    LE              reduce using rule 203 (literal -> CCONST .)
    GE              reduce using rule 203 (literal -> CCONST .)
    EQ              reduce using rule 203 (literal -> CCONST .)
    NE              reduce using rule 203 (literal -> CCONST .)
    BITAND          reduce using rule 203 (literal -> CCONST .)
    BITXOR          reduce using rule 203 (literal -> CCONST .)
    BITOR           reduce using rule 203 (literal -> CCONST .)
    LOGAND          reduce using rule 203 (literal -> CCONST .)
    CONDOP          reduce using rule 203 (literal -> CCONST .)
    LOGOR           reduce using rule 203 (literal -> CCONST .)
    DELIM           reduce using rule 203 (literal -> CCONST .)
    COMMA           reduce using rule 203 (literal -> CCONST .)
    CLOSE_BRACKET   reduce using rule 203 (literal -> CCONST .)
    CLOSE_PAREN     reduce using rule 203 (literal -> CCONST .)
    BLOCK_END       reduce using rule 203 (literal -> CCONST .)
    COLON           reduce using rule 203 (literal -> CCONST .)


state 175

    (67) unary-expression -> primary-expression .

    TIMES           reduce using rule 67 (unary-expression -> primary-expression .)
    DIV             reduce using rule 67 (unary-expression -> primary-expression .)
    MOD             reduce using rule 67 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 67 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 67 (unary-expression -> primary-expression .)
    LSHIFT          reduce using rule 67 (unary-expression -> primary-expression .)
    RSHIFT          reduce using rule 67 (unary-expression -> primary-expression .)
    LT              reduce using rule 67 (unary-expression -> primary-expression .)
    GT              reduce using rule 67 (unary-expression -> primary-expression .)
    LE              reduce using rule 67 (unary-expression -> primary-expression .)
    GE              reduce using rule 67 (unary-expression -> primary-expression .)
    EQ              reduce using rule 67 (unary-expression -> primary-expression .)
    NE              reduce using rule 67 (unary-expression -> primary-expression .)
    BITAND          reduce using rule 67 (unary-expression -> primary-expression .)
    BITXOR          reduce using rule 67 (unary-expression -> primary-expression .)
    BITOR           reduce using rule 67 (unary-expression -> primary-expression .)
    LOGAND          reduce using rule 67 (unary-expression -> primary-expression .)
    CONDOP          reduce using rule 67 (unary-expression -> primary-expression .)
    LOGOR           reduce using rule 67 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 67 (unary-expression -> primary-expression .)
    CLOSE_PAREN     reduce using rule 67 (unary-expression -> primary-expression .)
    DELIM           reduce using rule 67 (unary-expression -> primary-expression .)
    CLOSE_BRACKET   reduce using rule 67 (unary-expression -> primary-expression .)
    BLOCK_END       reduce using rule 67 (unary-expression -> primary-expression .)
    COLON           reduce using rule 67 (unary-expression -> primary-expression .)


state 176

    (85) primary-no-array-creation-expression -> invocation-expression .

    TIMES           reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    DIV             reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    MOD             reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    PLUS            reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    MINUS           reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    LSHIFT          reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    RSHIFT          reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    LT              reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    GT              reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    LE              reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    GE              reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    EQ              reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    NE              reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    BITAND          reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    BITXOR          reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    BITOR           reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    LOGAND          reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    CONDOP          reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    LOGOR           reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    COLON           reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    COMMA           reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_PAREN     reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    BLOCK_END       reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    DELIM           reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)
    CLOSE_BRACKET   reduce using rule 85 (primary-no-array-creation-expression -> invocation-expression .)


state 177

    (197) return-statement -> RETURN expression . DELIM

    DELIM           shift and go to state 257


state 178

    (83) primary-no-array-creation-expression -> parenthesized-expression .

    TIMES           reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    DIV             reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    MOD             reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    PLUS            reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    MINUS           reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    LSHIFT          reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    RSHIFT          reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    LT              reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    GT              reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    LE              reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    GE              reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    EQ              reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    NE              reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITAND          reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITXOR          reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    BITOR           reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGAND          reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    CONDOP          reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    LOGOR           reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    COLON           reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    COMMA           reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_PAREN     reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    BLOCK_END       reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    DELIM           reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)
    CLOSE_BRACKET   reduce using rule 83 (primary-no-array-creation-expression -> parenthesized-expression .)


state 179

    (151) declaration-statement -> local-variable-declaration DELIM .

    IDENTIFIER      reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_BEGIN     reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    DELIM           reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    CONSOLE         reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    CONST           reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    IF              reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    SWITCH          reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    WHILE           reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    FOR             reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    DO              reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    BREAK           reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    CONTINUE        reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    RETURN          reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    VOID            reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    BOOL            reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    INT             reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    CHAR            reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    STRING          reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    BLOCK_END       reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    CASE            reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)
    DEFAULT         reduce using rule 151 (declaration-statement -> local-variable-declaration DELIM .)


state 180

    (195) break-statement -> BREAK DELIM .

    IDENTIFIER      reduce using rule 195 (break-statement -> BREAK DELIM .)
    BLOCK_BEGIN     reduce using rule 195 (break-statement -> BREAK DELIM .)
    DELIM           reduce using rule 195 (break-statement -> BREAK DELIM .)
    CONSOLE         reduce using rule 195 (break-statement -> BREAK DELIM .)
    CONST           reduce using rule 195 (break-statement -> BREAK DELIM .)
    IF              reduce using rule 195 (break-statement -> BREAK DELIM .)
    SWITCH          reduce using rule 195 (break-statement -> BREAK DELIM .)
    WHILE           reduce using rule 195 (break-statement -> BREAK DELIM .)
    FOR             reduce using rule 195 (break-statement -> BREAK DELIM .)
    DO              reduce using rule 195 (break-statement -> BREAK DELIM .)
    BREAK           reduce using rule 195 (break-statement -> BREAK DELIM .)
    CONTINUE        reduce using rule 195 (break-statement -> BREAK DELIM .)
    RETURN          reduce using rule 195 (break-statement -> BREAK DELIM .)
    VOID            reduce using rule 195 (break-statement -> BREAK DELIM .)
    BOOL            reduce using rule 195 (break-statement -> BREAK DELIM .)
    INT             reduce using rule 195 (break-statement -> BREAK DELIM .)
    CHAR            reduce using rule 195 (break-statement -> BREAK DELIM .)
    STRING          reduce using rule 195 (break-statement -> BREAK DELIM .)
    BLOCK_END       reduce using rule 195 (break-statement -> BREAK DELIM .)
    CASE            reduce using rule 195 (break-statement -> BREAK DELIM .)
    DEFAULT         reduce using rule 195 (break-statement -> BREAK DELIM .)


state 181

    (134) statement-list -> statement-list statement .

    IDENTIFIER      reduce using rule 134 (statement-list -> statement-list statement .)
    BLOCK_BEGIN     reduce using rule 134 (statement-list -> statement-list statement .)
    DELIM           reduce using rule 134 (statement-list -> statement-list statement .)
    CONSOLE         reduce using rule 134 (statement-list -> statement-list statement .)
    CONST           reduce using rule 134 (statement-list -> statement-list statement .)
    IF              reduce using rule 134 (statement-list -> statement-list statement .)
    SWITCH          reduce using rule 134 (statement-list -> statement-list statement .)
    WHILE           reduce using rule 134 (statement-list -> statement-list statement .)
    FOR             reduce using rule 134 (statement-list -> statement-list statement .)
    DO              reduce using rule 134 (statement-list -> statement-list statement .)
    BREAK           reduce using rule 134 (statement-list -> statement-list statement .)
    CONTINUE        reduce using rule 134 (statement-list -> statement-list statement .)
    RETURN          reduce using rule 134 (statement-list -> statement-list statement .)
    VOID            reduce using rule 134 (statement-list -> statement-list statement .)
    BOOL            reduce using rule 134 (statement-list -> statement-list statement .)
    INT             reduce using rule 134 (statement-list -> statement-list statement .)
    CHAR            reduce using rule 134 (statement-list -> statement-list statement .)
    STRING          reduce using rule 134 (statement-list -> statement-list statement .)
    BLOCK_END       reduce using rule 134 (statement-list -> statement-list statement .)
    CASE            reduce using rule 134 (statement-list -> statement-list statement .)
    DEFAULT         reduce using rule 134 (statement-list -> statement-list statement .)


state 182

    (175) iteration-statement -> while-statement M_quad .

    IDENTIFIER      reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    DELIM           reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    CONSOLE         reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    CONST           reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    IF              reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    SWITCH          reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    WHILE           reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    FOR             reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    DO              reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    BREAK           reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    CONTINUE        reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    RETURN          reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    VOID            reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    BOOL            reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    INT             reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    CHAR            reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    STRING          reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    BLOCK_END       reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    CASE            reduce using rule 175 (iteration-statement -> while-statement M_quad .)
    DEFAULT         reduce using rule 175 (iteration-statement -> while-statement M_quad .)


state 183

    (167) switch-statement -> SWITCH OPEN_PAREN . expression M_switch CLOSE_PAREN M_quad switch-block
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 258
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 184

    (122) formal-parameter-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 122 (formal-parameter-list-opt -> empty .)


state 185

    (120) method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 259


state 186

    (124) fixed-parameters -> fixed-parameter .

    COMMA           reduce using rule 124 (fixed-parameters -> fixed-parameter .)
    CLOSE_PAREN     reduce using rule 124 (fixed-parameters -> fixed-parameter .)


state 187

    (123) formal-parameter-list -> fixed-parameters .
    (125) fixed-parameters -> fixed-parameters . COMMA fixed-parameter

    CLOSE_PAREN     reduce using rule 123 (formal-parameter-list -> fixed-parameters .)
    COMMA           shift and go to state 260


state 188

    (126) fixed-parameter -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 261


state 189

    (121) formal-parameter-list-opt -> formal-parameter-list .

    CLOSE_PAREN     reduce using rule 121 (formal-parameter-list-opt -> formal-parameter-list .)


state 190

    (29) array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .

    IDENTIFIER      reduce using rule 29 (array-type -> simple-type OPEN_BRACKET ICONST CLOSE_BRACKET .)


state 191

    (20) constant-declaration -> CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    STRING          reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 20 (constant-declaration -> CONST simple-type constant-declarators DELIM .)


state 192

    (31) constant-declarators -> constant-declarators COMMA . constant-declarator
    (32) constant-declarator -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 99

    constant-declarator            shift and go to state 262

state 193

    (32) constant-declarator -> IDENTIFIER ASSIGN . expression
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    conditional-or-expression      shift and go to state 172
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    expression                     shift and go to state 263
    parenthesized-expression       shift and go to state 178

state 194

    (115) variable-declarators -> variable-declarators COMMA variable-declarator .

    COMMA           reduce using rule 115 (variable-declarators -> variable-declarators COMMA variable-declarator .)
    DELIM           reduce using rule 115 (variable-declarators -> variable-declarators COMMA variable-declarator .)


state 195

    (119) method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 264


state 196

    (75) array-initializer -> BLOCK_BEGIN . variable-initializer-list-opt BLOCK_END
    (76) variable-initializer-list-opt -> . expression-list
    (77) variable-initializer-list-opt -> . empty
    (73) expression-list -> . expression
    (74) expression-list -> . expression-list COMMA expression
    (205) empty -> .
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    BLOCK_END       reduce using rule 205 (empty -> .)
    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    expression-list                shift and go to state 267
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    variable-initializer-list-opt  shift and go to state 266
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 214
    empty                          shift and go to state 265
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 197

    (79) variable-initializer -> array-initializer .

    DELIM           reduce using rule 79 (variable-initializer -> array-initializer .)
    COMMA           reduce using rule 79 (variable-initializer -> array-initializer .)


state 198

    (117) variable-declarator -> IDENTIFIER ASSIGN variable-initializer .

    COMMA           reduce using rule 117 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)
    DELIM           reduce using rule 117 (variable-declarator -> IDENTIFIER ASSIGN variable-initializer .)


state 199

    (78) variable-initializer -> expression .

    DELIM           reduce using rule 78 (variable-initializer -> expression .)
    COMMA           reduce using rule 78 (variable-initializer -> expression .)


state 200

    (21) constant-declaration -> modifier CONST simple-type constant-declarators . DELIM
    (31) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           shift and go to state 268
    COMMA           shift and go to state 192


state 201

    (110) field-declaration -> modifier type variable-declarators DELIM .

    CONST           reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)
    PUBLIC          reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)
    PRIVATE         reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)
    VOID            reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)
    BOOL            reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)
    INT             reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)
    CHAR            reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)
    STRING          reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)
    IDENTIFIER      reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)
    BLOCK_END       reduce using rule 110 (field-declaration -> modifier type variable-declarators DELIM .)


state 202

    (180) do-statement -> DO M_quad block . WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    WHILE           shift and go to state 269


state 203

    (97) assignment -> member-access assignment-operator expression .

    DELIM           reduce using rule 97 (assignment -> member-access assignment-operator expression .)
    COMMA           reduce using rule 97 (assignment -> member-access assignment-operator expression .)
    COLON           reduce using rule 97 (assignment -> member-access assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 97 (assignment -> member-access assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 97 (assignment -> member-access assignment-operator expression .)
    BLOCK_END       reduce using rule 97 (assignment -> member-access assignment-operator expression .)


state 204

    (95) element-access -> member-access OPEN_BRACKET expression . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 270


state 205

    (129) block -> BLOCK_BEGIN M_bstart statement-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 271


state 206

    (178) while-statement -> WHILE M_quad OPEN_PAREN . expression CLOSE_PAREN M_while block
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 272
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 207

    (154) local-constant-declaration -> CONST simple-type constant-declarators .
    (31) constant-declarators -> constant-declarators . COMMA constant-declarator

    DELIM           reduce using rule 154 (local-constant-declaration -> CONST simple-type constant-declarators .)
    COMMA           shift and go to state 192


state 208

    (98) assignment -> element-access assignment-operator expression .

    DELIM           reduce using rule 98 (assignment -> element-access assignment-operator expression .)
    COMMA           reduce using rule 98 (assignment -> element-access assignment-operator expression .)
    COLON           reduce using rule 98 (assignment -> element-access assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 98 (assignment -> element-access assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 98 (assignment -> element-access assignment-operator expression .)
    BLOCK_END       reduce using rule 98 (assignment -> element-access assignment-operator expression .)


state 209

    (91) invocation-expression -> IDENTIFIER DOT IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (89) member-access -> IDENTIFIER DOT IDENTIFIER .

    OPEN_PAREN      shift and go to state 273
    OPEN_BRACKET    reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    ASSIGN          reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)


state 210

    (94) element-access -> IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 274


state 211

    (90) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 275


state 212

    (93) argument-list-opt -> empty .

    CLOSE_PAREN     reduce using rule 93 (argument-list-opt -> empty .)


state 213

    (92) argument-list-opt -> expression-list .
    (74) expression-list -> expression-list . COMMA expression

    CLOSE_PAREN     reduce using rule 92 (argument-list-opt -> expression-list .)
    COMMA           shift and go to state 276


state 214

    (73) expression-list -> expression .

    COMMA           reduce using rule 73 (expression-list -> expression .)
    CLOSE_PAREN     reduce using rule 73 (expression-list -> expression .)
    BLOCK_END       reduce using rule 73 (expression-list -> expression .)


state 215

    (150) labeled-statement -> IDENTIFIER COLON statement .

    IDENTIFIER      reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_BEGIN     reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    DELIM           reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    CONSOLE         reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    BLOCK_END       reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 150 (labeled-statement -> IDENTIFIER COLON statement .)


state 216

    (96) assignment -> IDENTIFIER assignment-operator expression .

    DELIM           reduce using rule 96 (assignment -> IDENTIFIER assignment-operator expression .)
    COMMA           reduce using rule 96 (assignment -> IDENTIFIER assignment-operator expression .)
    COLON           reduce using rule 96 (assignment -> IDENTIFIER assignment-operator expression .)
    CLOSE_PAREN     reduce using rule 96 (assignment -> IDENTIFIER assignment-operator expression .)
    CLOSE_BRACKET   reduce using rule 96 (assignment -> IDENTIFIER assignment-operator expression .)
    BLOCK_END       reduce using rule 96 (assignment -> IDENTIFIER assignment-operator expression .)


state 217

    (146) write-statement -> CONSOLE DOT WRITELINE . OPEN_PAREN print-list CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 277


state 218

    (149) read-statement -> CONSOLE DOT READLINE . OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 278


state 219

    (182) for-initializer-opt -> for-initializer .

    DELIM           reduce using rule 182 (for-initializer-opt -> for-initializer .)


state 220

    (190) statement-expression-list -> statement-expression .

    COMMA           reduce using rule 190 (statement-expression-list -> statement-expression .)
    DELIM           reduce using rule 190 (statement-expression-list -> statement-expression .)
    CLOSE_PAREN     reduce using rule 190 (statement-expression-list -> statement-expression .)


state 221

    (184) for-initializer -> statement-expression-list .
    (191) statement-expression-list -> statement-expression-list . COMMA statement-expression

    DELIM           reduce using rule 184 (for-initializer -> statement-expression-list .)
    COMMA           shift and go to state 279


state 222

    (90) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> IDENTIFIER . DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> IDENTIFIER . assignment-operator expression
    (89) member-access -> IDENTIFIER . DOT IDENTIFIER
    (94) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (99) assignment-operator -> . ASSIGN
    (100) assignment-operator -> . PLUSEQUAL
    (101) assignment-operator -> . MINUSEQUAL
    (102) assignment-operator -> . TIMESEQUAL
    (103) assignment-operator -> . DIVEQUAL
    (104) assignment-operator -> . MODEQUAL
    (105) assignment-operator -> . BITANDEQUAL
    (106) assignment-operator -> . BITOREQUAL
    (107) assignment-operator -> . BITXOREQUAL
    (108) assignment-operator -> . LSHIFTEQUAL
    (109) assignment-operator -> . RSHIFTEQUAL

    OPEN_PAREN      shift and go to state 134
    DOT             shift and go to state 132
    OPEN_BRACKET    shift and go to state 133
    ASSIGN          shift and go to state 121
    PLUSEQUAL       shift and go to state 117
    MINUSEQUAL      shift and go to state 114
    TIMESEQUAL      shift and go to state 113
    DIVEQUAL        shift and go to state 110
    MODEQUAL        shift and go to state 122
    BITANDEQUAL     shift and go to state 119
    BITOREQUAL      shift and go to state 116
    BITXOREQUAL     shift and go to state 118
    LSHIFTEQUAL     shift and go to state 120
    RSHIFTEQUAL     shift and go to state 111

    assignment-operator            shift and go to state 136

state 223

    (183) for-initializer-opt -> empty .

    DELIM           reduce using rule 183 (for-initializer-opt -> empty .)


state 224

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt . DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 280


state 225

    (161) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block
    (162) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> IF OPEN_PAREN expression . CLOSE_PAREN M_if block ELSE M_else if-statement M_quad

    CLOSE_PAREN     shift and go to state 281


state 226

    (46) exclusive-or-expression -> exclusive-or-expression BITXOR . and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    and-expression                 shift and go to state 282
    multiplicative-expression      shift and go to state 171
    equality-expression            shift and go to state 166
    unary-expression               shift and go to state 143
    relational-expression          shift and go to state 146
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    additive-expression            shift and go to state 149
    parenthesized-expression       shift and go to state 178
    member-access                  shift and go to state 234
    shift-expression               shift and go to state 168

state 227

    (55) relational-expression -> relational-expression LE . shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 171
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    additive-expression            shift and go to state 149
    parenthesized-expression       shift and go to state 178
    shift-expression               shift and go to state 283

state 228

    (56) relational-expression -> relational-expression GE . shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 171
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    additive-expression            shift and go to state 149
    parenthesized-expression       shift and go to state 178
    shift-expression               shift and go to state 284

state 229

    (53) relational-expression -> relational-expression LT . shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 171
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    additive-expression            shift and go to state 149
    parenthesized-expression       shift and go to state 178
    shift-expression               shift and go to state 285

state 230

    (54) relational-expression -> relational-expression GT . shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 171
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    additive-expression            shift and go to state 149
    parenthesized-expression       shift and go to state 178
    shift-expression               shift and go to state 286

state 231

    (87) object-creation-expression -> NEW class-type . OPEN_PAREN argument-list-opt CLOSE_PAREN

    OPEN_PAREN      shift and go to state 287


state 232

    (61) additive-expression -> additive-expression PLUS . multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 288
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 233

    (62) additive-expression -> additive-expression MINUS . multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 289
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 234

    (84) primary-no-array-creation-expression -> member-access .
    (95) element-access -> member-access . OPEN_BRACKET expression CLOSE_BRACKET

    TIMES           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    DIV             reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    MOD             reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    PLUS            reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    MINUS           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LSHIFT          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    RSHIFT          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LT              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    GT              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LE              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    GE              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    EQ              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    NE              reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    BITAND          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    BITXOR          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    BITOR           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LOGAND          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    CONDOP          reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    LOGOR           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    DELIM           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    COMMA           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    CLOSE_BRACKET   reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    CLOSE_PAREN     reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    BLOCK_END       reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    COLON           reduce using rule 84 (primary-no-array-creation-expression -> member-access .)
    OPEN_BRACKET    shift and go to state 115


state 235

    (69) unary-expression -> MINUS unary-expression .

    TIMES           reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    DIV             reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    MOD             reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    PLUS            reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    MINUS           reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    LSHIFT          reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    RSHIFT          reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    LT              reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    GT              reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    LE              reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    GE              reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    EQ              reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    NE              reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    BITAND          reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    BITXOR          reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    BITOR           reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    LOGAND          reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    CONDOP          reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    LOGOR           reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    COMMA           reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    CLOSE_PAREN     reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    DELIM           reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    BLOCK_END       reduce using rule 69 (unary-expression -> MINUS unary-expression .)
    COLON           reduce using rule 69 (unary-expression -> MINUS unary-expression .)


state 236

    (82) primary-no-array-creation-expression -> element-access .

    TIMES           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    DIV             reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    MOD             reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    PLUS            reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    MINUS           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LSHIFT          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    RSHIFT          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LT              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    GT              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LE              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    GE              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    EQ              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    NE              reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    BITAND          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    BITXOR          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    BITOR           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LOGAND          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    CONDOP          reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    LOGOR           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    DELIM           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    COMMA           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    CLOSE_BRACKET   reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    CLOSE_PAREN     reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    BLOCK_END       reduce using rule 82 (primary-no-array-creation-expression -> element-access .)
    COLON           reduce using rule 82 (primary-no-array-creation-expression -> element-access .)


state 237

    (81) primary-no-array-creation-expression -> IDENTIFIER .
    (94) element-access -> IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET
    (89) member-access -> IDENTIFIER . DOT IDENTIFIER
    (90) invocation-expression -> IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> IDENTIFIER . DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN

    TIMES           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    DIV             reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    MOD             reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    PLUS            reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    MINUS           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LT              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    GT              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LE              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    GE              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    EQ              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    NE              reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITAND          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITXOR          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    BITOR           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGAND          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    CONDOP          reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    LOGOR           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    DELIM           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    COMMA           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    BLOCK_END       reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    COLON           reduce using rule 81 (primary-no-array-creation-expression -> IDENTIFIER .)
    OPEN_BRACKET    shift and go to state 133
    DOT             shift and go to state 242
    OPEN_PAREN      shift and go to state 134


state 238

    (44) inclusive-or-expression -> inclusive-or-expression BITOR . exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    and-expression                 shift and go to state 169
    element-access                 shift and go to state 236
    additive-expression            shift and go to state 149
    exclusive-or-expression        shift and go to state 290
    unary-expression               shift and go to state 143
    relational-expression          shift and go to state 146
    multiplicative-expression      shift and go to state 171
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    equality-expression            shift and go to state 166
    parenthesized-expression       shift and go to state 178
    member-access                  shift and go to state 234
    shift-expression               shift and go to state 168

state 239

    (71) unary-expression -> BITCOMP unary-expression .

    TIMES           reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    DIV             reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    MOD             reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    PLUS            reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    MINUS           reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    LSHIFT          reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    RSHIFT          reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    LT              reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    GT              reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    LE              reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    GE              reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    EQ              reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    NE              reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    BITAND          reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    BITXOR          reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    BITOR           reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    LOGAND          reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    CONDOP          reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    LOGOR           reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    COMMA           reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_PAREN     reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    DELIM           reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    CLOSE_BRACKET   reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    BLOCK_END       reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)
    COLON           reduce using rule 71 (unary-expression -> BITCOMP unary-expression .)


state 240

    (88) parenthesized-expression -> OPEN_PAREN expression . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 291


state 241

    (68) unary-expression -> PLUS unary-expression .

    TIMES           reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    DIV             reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    MOD             reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    PLUS            reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    MINUS           reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    LSHIFT          reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    RSHIFT          reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    LT              reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    GT              reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    LE              reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    GE              reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    EQ              reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    NE              reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    BITAND          reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    BITXOR          reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    BITOR           reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    LOGAND          reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    CONDOP          reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    LOGOR           reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    COMMA           reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    CLOSE_PAREN     reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    DELIM           reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    CLOSE_BRACKET   reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    BLOCK_END       reduce using rule 68 (unary-expression -> PLUS unary-expression .)
    COLON           reduce using rule 68 (unary-expression -> PLUS unary-expression .)


state 242

    (89) member-access -> IDENTIFIER DOT . IDENTIFIER
    (91) invocation-expression -> IDENTIFIER DOT . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 292


state 243

    (40) M_and -> empty .

    LOGAND          reduce using rule 40 (M_and -> empty .)


state 244

    (42) conditional-and-expression -> conditional-and-expression M_and . LOGAND inclusive-or-expression

    LOGAND          shift and go to state 293


state 245

    (50) equality-expression -> equality-expression EQ . relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 171
    unary-expression               shift and go to state 143
    relational-expression          shift and go to state 294
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    additive-expression            shift and go to state 149
    parenthesized-expression       shift and go to state 178
    member-access                  shift and go to state 234
    shift-expression               shift and go to state 168

state 246

    (51) equality-expression -> equality-expression NE . relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 171
    unary-expression               shift and go to state 143
    relational-expression          shift and go to state 295
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    additive-expression            shift and go to state 149
    parenthesized-expression       shift and go to state 178
    member-access                  shift and go to state 234
    shift-expression               shift and go to state 168

state 247

    (59) shift-expression -> shift-expression RSHIFT . additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 171
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    additive-expression            shift and go to state 296
    parenthesized-expression       shift and go to state 178

state 248

    (58) shift-expression -> shift-expression LSHIFT . additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 171
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    additive-expression            shift and go to state 297
    parenthesized-expression       shift and go to state 178

state 249

    (48) and-expression -> and-expression BITAND . equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    multiplicative-expression      shift and go to state 171
    additive-expression            shift and go to state 149
    unary-expression               shift and go to state 143
    relational-expression          shift and go to state 146
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    equality-expression            shift and go to state 298
    parenthesized-expression       shift and go to state 178
    member-access                  shift and go to state 234
    shift-expression               shift and go to state 168

state 250

    (65) multiplicative-expression -> multiplicative-expression DIV . unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 299
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 251

    (66) multiplicative-expression -> multiplicative-expression MOD . unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 300
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 252

    (64) multiplicative-expression -> multiplicative-expression TIMES . unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    primary-no-array-creation-expression shift and go to state 170
    member-access                  shift and go to state 234
    unary-expression               shift and go to state 301
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    object-creation-expression     shift and go to state 164
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 253

    (38) conditional-or-expression -> conditional-or-expression M_or . LOGOR conditional-and-expression

    LOGOR           shift and go to state 302


state 254

    (36) conditional-expression -> conditional-or-expression CONDOP . expression COLON expression
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 303
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 255

    (39) M_or -> empty .

    LOGOR           reduce using rule 39 (M_or -> empty .)


state 256

    (70) unary-expression -> BITNOT unary-expression .

    TIMES           reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    DIV             reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    MOD             reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    PLUS            reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    MINUS           reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    LSHIFT          reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    RSHIFT          reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    LT              reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    GT              reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    LE              reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    GE              reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    EQ              reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    NE              reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    BITAND          reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    BITXOR          reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    BITOR           reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    LOGAND          reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    CONDOP          reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    LOGOR           reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    COMMA           reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    CLOSE_PAREN     reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    DELIM           reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    CLOSE_BRACKET   reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    BLOCK_END       reduce using rule 70 (unary-expression -> BITNOT unary-expression .)
    COLON           reduce using rule 70 (unary-expression -> BITNOT unary-expression .)


state 257

    (197) return-statement -> RETURN expression DELIM .

    IDENTIFIER      reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    BLOCK_BEGIN     reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    DELIM           reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    CONSOLE         reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    CONST           reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    IF              reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    SWITCH          reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    WHILE           reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    FOR             reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    DO              reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    BREAK           reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    CONTINUE        reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    RETURN          reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    VOID            reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    BOOL            reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    INT             reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    CHAR            reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    STRING          reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    BLOCK_END       reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    CASE            reduce using rule 197 (return-statement -> RETURN expression DELIM .)
    DEFAULT         reduce using rule 197 (return-statement -> RETURN expression DELIM .)


state 258

    (167) switch-statement -> SWITCH OPEN_PAREN expression . M_switch CLOSE_PAREN M_quad switch-block
    (168) M_switch -> . empty
    (205) empty -> .

    CLOSE_PAREN     reduce using rule 205 (empty -> .)

    M_switch                       shift and go to state 304
    empty                          shift and go to state 305

state 259

    (120) method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    BLOCK_BEGIN     reduce using rule 120 (method-header -> VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 260

    (125) fixed-parameters -> fixed-parameters COMMA . fixed-parameter
    (126) fixed-parameter -> . type IDENTIFIER
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET

    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21
    IDENTIFIER      shift and go to state 31

    array-type                     shift and go to state 28
    simple-type                    shift and go to state 19
    class-type                     shift and go to state 34
    type                           shift and go to state 188
    fixed-parameter                shift and go to state 306

state 261

    (126) fixed-parameter -> type IDENTIFIER .

    COMMA           reduce using rule 126 (fixed-parameter -> type IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 126 (fixed-parameter -> type IDENTIFIER .)


state 262

    (31) constant-declarators -> constant-declarators COMMA constant-declarator .

    DELIM           reduce using rule 31 (constant-declarators -> constant-declarators COMMA constant-declarator .)
    COMMA           reduce using rule 31 (constant-declarators -> constant-declarators COMMA constant-declarator .)


state 263

    (32) constant-declarator -> IDENTIFIER ASSIGN expression .

    DELIM           reduce using rule 32 (constant-declarator -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 32 (constant-declarator -> IDENTIFIER ASSIGN expression .)


state 264

    (119) method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .

    BLOCK_BEGIN     reduce using rule 119 (method-header -> type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN .)


state 265

    (77) variable-initializer-list-opt -> empty .

    BLOCK_END       reduce using rule 77 (variable-initializer-list-opt -> empty .)


state 266

    (75) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt . BLOCK_END

    BLOCK_END       shift and go to state 307


state 267

    (76) variable-initializer-list-opt -> expression-list .
    (74) expression-list -> expression-list . COMMA expression

    BLOCK_END       reduce using rule 76 (variable-initializer-list-opt -> expression-list .)
    COMMA           shift and go to state 276


state 268

    (21) constant-declaration -> modifier CONST simple-type constant-declarators DELIM .

    CONST           reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PUBLIC          reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    PRIVATE         reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    VOID            reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BOOL            reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    INT             reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    CHAR            reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    STRING          reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    IDENTIFIER      reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)
    BLOCK_END       reduce using rule 21 (constant-declaration -> modifier CONST simple-type constant-declarators DELIM .)


state 269

    (180) do-statement -> DO M_quad block WHILE . OPEN_PAREN M_quad expression CLOSE_PAREN DELIM

    OPEN_PAREN      shift and go to state 308


state 270

    (95) element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .

    TIMES           reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DIV             reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MOD             reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFT          reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFT          reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LT              reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    GT              reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LE              reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    GE              reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    EQ              reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    NE              reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITAND          reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOR          reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOR           reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGAND          reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CONDOP          reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGOR           reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DELIM           reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    ASSIGN          reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 95 (element-access -> member-access OPEN_BRACKET expression CLOSE_BRACKET .)


state 271

    (129) block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .

    IDENTIFIER      reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DELIM           reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONSOLE         reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONST           reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    IF              reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    SWITCH          reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    WHILE           reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    FOR             reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DO              reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BREAK           reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CONTINUE        reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    RETURN          reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    VOID            reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BOOL            reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    INT             reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CHAR            reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    STRING          reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    BLOCK_END       reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    CASE            reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    DEFAULT         reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)
    ELSE            reduce using rule 129 (block -> BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END .)


state 272

    (178) while-statement -> WHILE M_quad OPEN_PAREN expression . CLOSE_PAREN M_while block

    CLOSE_PAREN     shift and go to state 309


state 273

    (91) invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (92) argument-list-opt -> . expression-list
    (93) argument-list-opt -> . empty
    (73) expression-list -> . expression
    (74) expression-list -> . expression-list COMMA expression
    (205) empty -> .
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 205 (empty -> .)
    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    argument-list-opt              shift and go to state 310
    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    equality-expression            shift and go to state 166
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    expression-list                shift and go to state 213
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 214
    empty                          shift and go to state 212
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 274

    (94) element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .

    TIMES           reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIV             reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MOD             reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUS            reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUS           reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFT          reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFT          reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LT              reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GT              reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LE              reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    GE              reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    EQ              reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    NE              reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITAND          reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOR          reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOR           reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGAND          reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CONDOP          reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LOGOR           reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DELIM           reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COMMA           reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BLOCK_END       reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    COLON           reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    ASSIGN          reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    PLUSEQUAL       reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MINUSEQUAL      reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    TIMESEQUAL      reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    DIVEQUAL        reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    MODEQUAL        reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITANDEQUAL     reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITOREQUAL      reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    BITXOREQUAL     reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    LSHIFTEQUAL     reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)
    RSHIFTEQUAL     reduce using rule 94 (element-access -> IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .)


state 275

    (90) invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 90 (invocation-expression -> IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 276

    (74) expression-list -> expression-list COMMA . expression
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    equality-expression            shift and go to state 166
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 311
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 277

    (146) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN . print-list CLOSE_PAREN DELIM
    (147) print-list -> . expression
    (148) print-list -> . expression COMMA print-list
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    and-expression                 shift and go to state 169
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    print-list                     shift and go to state 312
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 313
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 278

    (149) read-statement -> CONSOLE DOT READLINE OPEN_PAREN . IDENTIFIER CLOSE_PAREN DELIM

    IDENTIFIER      shift and go to state 314


state 279

    (191) statement-expression-list -> statement-expression-list COMMA . statement-expression
    (157) statement-expression -> . invocation-expression
    (158) statement-expression -> . assignment
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 222

    assignment                     shift and go to state 70
    member-access                  shift and go to state 55
    element-access                 shift and go to state 66
    statement-expression           shift and go to state 315
    invocation-expression          shift and go to state 79

state 280

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM . M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (166) M_quad -> . empty
    (205) empty -> .

    IDENTIFIER      reduce using rule 205 (empty -> .)
    PLUS            reduce using rule 205 (empty -> .)
    MINUS           reduce using rule 205 (empty -> .)
    BITNOT          reduce using rule 205 (empty -> .)
    BITCOMP         reduce using rule 205 (empty -> .)
    ICONST          reduce using rule 205 (empty -> .)
    DCONST          reduce using rule 205 (empty -> .)
    TRUE            reduce using rule 205 (empty -> .)
    FALSE           reduce using rule 205 (empty -> .)
    CCONST          reduce using rule 205 (empty -> .)
    SCONST          reduce using rule 205 (empty -> .)
    OPEN_PAREN      reduce using rule 205 (empty -> .)
    NEW             reduce using rule 205 (empty -> .)
    DELIM           reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 316
    empty                          shift and go to state 108

state 281

    (161) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block
    (162) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block ELSE M_else block
    (163) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN . M_if block ELSE M_else if-statement M_quad
    (164) M_if -> . empty
    (205) empty -> .

    BLOCK_BEGIN     reduce using rule 205 (empty -> .)

    M_if                           shift and go to state 317
    empty                          shift and go to state 318

state 282

    (46) exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .
    (48) and-expression -> and-expression . BITAND equality-expression

    BITXOR          reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITOR           reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGAND          reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CONDOP          reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    LOGOR           reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COMMA           reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_PAREN     reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    DELIM           reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    CLOSE_BRACKET   reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BLOCK_END       reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    COLON           reduce using rule 46 (exclusive-or-expression -> exclusive-or-expression BITXOR and-expression .)
    BITAND          shift and go to state 249


state 283

    (55) relational-expression -> relational-expression LE shift-expression .
    (58) shift-expression -> shift-expression . LSHIFT additive-expression
    (59) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    GT              reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    LE              reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    GE              reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    EQ              reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    NE              reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    BITAND          reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    BITXOR          reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    BITOR           reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    LOGAND          reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    CONDOP          reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    LOGOR           reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    DELIM           reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    COMMA           reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_BRACKET   reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    CLOSE_PAREN     reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    BLOCK_END       reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    COLON           reduce using rule 55 (relational-expression -> relational-expression LE shift-expression .)
    LSHIFT          shift and go to state 248
    RSHIFT          shift and go to state 247


state 284

    (56) relational-expression -> relational-expression GE shift-expression .
    (58) shift-expression -> shift-expression . LSHIFT additive-expression
    (59) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    GT              reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    LE              reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    GE              reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    EQ              reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    NE              reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    BITAND          reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    BITXOR          reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    BITOR           reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    LOGAND          reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    CONDOP          reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    LOGOR           reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    DELIM           reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    COMMA           reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_BRACKET   reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    CLOSE_PAREN     reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    BLOCK_END       reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    COLON           reduce using rule 56 (relational-expression -> relational-expression GE shift-expression .)
    LSHIFT          shift and go to state 248
    RSHIFT          shift and go to state 247


state 285

    (53) relational-expression -> relational-expression LT shift-expression .
    (58) shift-expression -> shift-expression . LSHIFT additive-expression
    (59) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    GT              reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    LE              reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    GE              reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    EQ              reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    NE              reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    BITAND          reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    BITXOR          reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    BITOR           reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    LOGAND          reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    CONDOP          reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    LOGOR           reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    DELIM           reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    COMMA           reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_BRACKET   reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    CLOSE_PAREN     reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    BLOCK_END       reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    COLON           reduce using rule 53 (relational-expression -> relational-expression LT shift-expression .)
    LSHIFT          shift and go to state 248
    RSHIFT          shift and go to state 247


state 286

    (54) relational-expression -> relational-expression GT shift-expression .
    (58) shift-expression -> shift-expression . LSHIFT additive-expression
    (59) shift-expression -> shift-expression . RSHIFT additive-expression

    LT              reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    GT              reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    LE              reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    GE              reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    EQ              reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    NE              reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    BITAND          reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    BITXOR          reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    BITOR           reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    LOGAND          reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    CONDOP          reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    LOGOR           reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    DELIM           reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    COMMA           reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_BRACKET   reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    CLOSE_PAREN     reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    BLOCK_END       reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    COLON           reduce using rule 54 (relational-expression -> relational-expression GT shift-expression .)
    LSHIFT          shift and go to state 248
    RSHIFT          shift and go to state 247


state 287

    (87) object-creation-expression -> NEW class-type OPEN_PAREN . argument-list-opt CLOSE_PAREN
    (92) argument-list-opt -> . expression-list
    (93) argument-list-opt -> . empty
    (73) expression-list -> . expression
    (74) expression-list -> . expression-list COMMA expression
    (205) empty -> .
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 205 (empty -> .)
    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    argument-list-opt              shift and go to state 319
    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    equality-expression            shift and go to state 166
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-expression             shift and go to state 175
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    expression-list                shift and go to state 213
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 214
    empty                          shift and go to state 212
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 288

    (61) additive-expression -> additive-expression PLUS multiplicative-expression .
    (64) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (65) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (66) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    MINUS           reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LSHIFT          reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    RSHIFT          reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LT              reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GT              reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LE              reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    GE              reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    EQ              reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    NE              reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITAND          reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITXOR          reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BITOR           reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGAND          reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CONDOP          reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    LOGOR           reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    DELIM           reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COMMA           reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    BLOCK_END       reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    COLON           reduce using rule 61 (additive-expression -> additive-expression PLUS multiplicative-expression .)
    TIMES           shift and go to state 252
    DIV             shift and go to state 250
    MOD             shift and go to state 251


state 289

    (62) additive-expression -> additive-expression MINUS multiplicative-expression .
    (64) multiplicative-expression -> multiplicative-expression . TIMES unary-expression
    (65) multiplicative-expression -> multiplicative-expression . DIV unary-expression
    (66) multiplicative-expression -> multiplicative-expression . MOD unary-expression

    PLUS            reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    MINUS           reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LSHIFT          reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    RSHIFT          reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LT              reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GT              reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LE              reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    GE              reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    EQ              reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    NE              reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITAND          reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITXOR          reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BITOR           reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGAND          reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CONDOP          reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    LOGOR           reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    DELIM           reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COMMA           reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_BRACKET   reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    CLOSE_PAREN     reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    BLOCK_END       reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    COLON           reduce using rule 62 (additive-expression -> additive-expression MINUS multiplicative-expression .)
    TIMES           shift and go to state 252
    DIV             shift and go to state 250
    MOD             shift and go to state 251


state 290

    (44) inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .
    (46) exclusive-or-expression -> exclusive-or-expression . BITXOR and-expression

    BITOR           reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGAND          reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CONDOP          reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    LOGOR           reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    DELIM           reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COMMA           reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BLOCK_END       reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    COLON           reduce using rule 44 (inclusive-or-expression -> inclusive-or-expression BITOR exclusive-or-expression .)
    BITXOR          shift and go to state 226


state 291

    (88) parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .

    TIMES           reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIV             reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MOD             reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PLUS            reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LSHIFT          reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    RSHIFT          reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LT              reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GT              reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LE              reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GE              reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQ              reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NE              reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITAND          reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITXOR          reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BITOR           reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGAND          reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CONDOP          reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LOGOR           reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BLOCK_END       reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DELIM           reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COLON           reduce using rule 88 (parenthesized-expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 292

    (89) member-access -> IDENTIFIER DOT IDENTIFIER .
    (91) invocation-expression -> IDENTIFIER DOT IDENTIFIER . OPEN_PAREN argument-list-opt CLOSE_PAREN

    OPEN_BRACKET    reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    ASSIGN          reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUSEQUAL       reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUSEQUAL      reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMESEQUAL      reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIVEQUAL        reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MODEQUAL        reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITANDEQUAL     reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOREQUAL      reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOREQUAL     reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFTEQUAL     reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFTEQUAL     reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DIV             reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    PLUS            reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LSHIFT          reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    RSHIFT          reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    NE              reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITAND          reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITXOR          reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BITOR           reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LOGAND          reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CONDOP          reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    LOGOR           reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    BLOCK_END       reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    DELIM           reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_BRACKET   reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    COLON           reduce using rule 89 (member-access -> IDENTIFIER DOT IDENTIFIER .)
    OPEN_PAREN      shift and go to state 273


state 293

    (42) conditional-and-expression -> conditional-and-expression M_and LOGAND . inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 234
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    primary-no-array-creation-expression shift and go to state 170
    inclusive-or-expression        shift and go to state 320
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    primary-expression             shift and go to state 175
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 294

    (50) equality-expression -> equality-expression EQ relational-expression .
    (53) relational-expression -> relational-expression . LT shift-expression
    (54) relational-expression -> relational-expression . GT shift-expression
    (55) relational-expression -> relational-expression . LE shift-expression
    (56) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    NE              reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    BITAND          reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    BITXOR          reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    BITOR           reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    LOGAND          reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    CONDOP          reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    LOGOR           reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    DELIM           reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    COMMA           reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_PAREN     reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    CLOSE_BRACKET   reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    BLOCK_END       reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    COLON           reduce using rule 50 (equality-expression -> equality-expression EQ relational-expression .)
    LT              shift and go to state 229
    GT              shift and go to state 230
    LE              shift and go to state 227
    GE              shift and go to state 228


state 295

    (51) equality-expression -> equality-expression NE relational-expression .
    (53) relational-expression -> relational-expression . LT shift-expression
    (54) relational-expression -> relational-expression . GT shift-expression
    (55) relational-expression -> relational-expression . LE shift-expression
    (56) relational-expression -> relational-expression . GE shift-expression

    EQ              reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    NE              reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    BITAND          reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    BITXOR          reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    BITOR           reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    LOGAND          reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    CONDOP          reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    LOGOR           reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    DELIM           reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    COMMA           reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_PAREN     reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    CLOSE_BRACKET   reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    BLOCK_END       reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    COLON           reduce using rule 51 (equality-expression -> equality-expression NE relational-expression .)
    LT              shift and go to state 229
    GT              shift and go to state 230
    LE              shift and go to state 227
    GE              shift and go to state 228


state 296

    (59) shift-expression -> shift-expression RSHIFT additive-expression .
    (61) additive-expression -> additive-expression . PLUS multiplicative-expression
    (62) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    RSHIFT          reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LT              reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GT              reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LE              reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    GE              reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    EQ              reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    NE              reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITAND          reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITXOR          reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BITOR           reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGAND          reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CONDOP          reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    LOGOR           reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    DELIM           reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COMMA           reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    BLOCK_END       reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    COLON           reduce using rule 59 (shift-expression -> shift-expression RSHIFT additive-expression .)
    PLUS            shift and go to state 232
    MINUS           shift and go to state 233


state 297

    (58) shift-expression -> shift-expression LSHIFT additive-expression .
    (61) additive-expression -> additive-expression . PLUS multiplicative-expression
    (62) additive-expression -> additive-expression . MINUS multiplicative-expression

    LSHIFT          reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    RSHIFT          reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LT              reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GT              reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LE              reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    GE              reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    EQ              reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    NE              reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITAND          reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITXOR          reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BITOR           reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGAND          reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CONDOP          reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    LOGOR           reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_BRACKET   reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    DELIM           reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COMMA           reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    CLOSE_PAREN     reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    BLOCK_END       reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    COLON           reduce using rule 58 (shift-expression -> shift-expression LSHIFT additive-expression .)
    PLUS            shift and go to state 232
    MINUS           shift and go to state 233


state 298

    (48) and-expression -> and-expression BITAND equality-expression .
    (50) equality-expression -> equality-expression . EQ relational-expression
    (51) equality-expression -> equality-expression . NE relational-expression

    BITAND          reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    BITXOR          reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    BITOR           reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    LOGAND          reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    CONDOP          reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    LOGOR           reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    DELIM           reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_PAREN     reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    CLOSE_BRACKET   reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    COMMA           reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    BLOCK_END       reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    COLON           reduce using rule 48 (and-expression -> and-expression BITAND equality-expression .)
    EQ              shift and go to state 245
    NE              shift and go to state 246


state 299

    (65) multiplicative-expression -> multiplicative-expression DIV unary-expression .

    TIMES           reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DIV             reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MOD             reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    PLUS            reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    MINUS           reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LSHIFT          reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    RSHIFT          reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LT              reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GT              reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LE              reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    GE              reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    EQ              reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    NE              reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITAND          reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITXOR          reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BITOR           reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGAND          reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CONDOP          reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    LOGOR           reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    DELIM           reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_BRACKET   reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COMMA           reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    CLOSE_PAREN     reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    BLOCK_END       reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)
    COLON           reduce using rule 65 (multiplicative-expression -> multiplicative-expression DIV unary-expression .)


state 300

    (66) multiplicative-expression -> multiplicative-expression MOD unary-expression .

    TIMES           reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DIV             reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MOD             reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    PLUS            reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    MINUS           reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LSHIFT          reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    RSHIFT          reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LT              reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GT              reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LE              reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    GE              reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    EQ              reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    NE              reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITAND          reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITXOR          reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BITOR           reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGAND          reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CONDOP          reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    LOGOR           reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    DELIM           reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_BRACKET   reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COMMA           reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    CLOSE_PAREN     reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    BLOCK_END       reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)
    COLON           reduce using rule 66 (multiplicative-expression -> multiplicative-expression MOD unary-expression .)


state 301

    (64) multiplicative-expression -> multiplicative-expression TIMES unary-expression .

    TIMES           reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DIV             reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MOD             reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    PLUS            reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    MINUS           reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LSHIFT          reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    RSHIFT          reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LT              reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GT              reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LE              reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    GE              reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    EQ              reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    NE              reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITAND          reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITXOR          reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BITOR           reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGAND          reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CONDOP          reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    LOGOR           reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    DELIM           reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_BRACKET   reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COMMA           reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    CLOSE_PAREN     reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    BLOCK_END       reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)
    COLON           reduce using rule 64 (multiplicative-expression -> multiplicative-expression TIMES unary-expression .)


state 302

    (38) conditional-or-expression -> conditional-or-expression M_or LOGOR . conditional-and-expression
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    IDENTIFIER      shift and go to state 237
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 234
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 236
    literal                        shift and go to state 162
    conditional-and-expression     shift and go to state 321
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    parenthesized-expression       shift and go to state 178

state 303

    (36) conditional-expression -> conditional-or-expression CONDOP expression . COLON expression

    COLON           shift and go to state 322


state 304

    (167) switch-statement -> SWITCH OPEN_PAREN expression M_switch . CLOSE_PAREN M_quad switch-block

    CLOSE_PAREN     shift and go to state 323


state 305

    (168) M_switch -> empty .

    CLOSE_PAREN     reduce using rule 168 (M_switch -> empty .)


state 306

    (125) fixed-parameters -> fixed-parameters COMMA fixed-parameter .

    COMMA           reduce using rule 125 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)
    CLOSE_PAREN     reduce using rule 125 (fixed-parameters -> fixed-parameters COMMA fixed-parameter .)


state 307

    (75) array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .

    DELIM           reduce using rule 75 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)
    COMMA           reduce using rule 75 (array-initializer -> BLOCK_BEGIN variable-initializer-list-opt BLOCK_END .)


state 308

    (180) do-statement -> DO M_quad block WHILE OPEN_PAREN . M_quad expression CLOSE_PAREN DELIM
    (166) M_quad -> . empty
    (205) empty -> .

    IDENTIFIER      reduce using rule 205 (empty -> .)
    PLUS            reduce using rule 205 (empty -> .)
    MINUS           reduce using rule 205 (empty -> .)
    BITNOT          reduce using rule 205 (empty -> .)
    BITCOMP         reduce using rule 205 (empty -> .)
    ICONST          reduce using rule 205 (empty -> .)
    DCONST          reduce using rule 205 (empty -> .)
    TRUE            reduce using rule 205 (empty -> .)
    FALSE           reduce using rule 205 (empty -> .)
    CCONST          reduce using rule 205 (empty -> .)
    SCONST          reduce using rule 205 (empty -> .)
    OPEN_PAREN      reduce using rule 205 (empty -> .)
    NEW             reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 324
    empty                          shift and go to state 108

state 309

    (178) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN . M_while block
    (179) M_while -> . empty
    (205) empty -> .

    BLOCK_BEGIN     reduce using rule 205 (empty -> .)

    M_while                        shift and go to state 325
    empty                          shift and go to state 326

state 310

    (91) invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 327


state 311

    (74) expression-list -> expression-list COMMA expression .

    COMMA           reduce using rule 74 (expression-list -> expression-list COMMA expression .)
    CLOSE_PAREN     reduce using rule 74 (expression-list -> expression-list COMMA expression .)
    BLOCK_END       reduce using rule 74 (expression-list -> expression-list COMMA expression .)


state 312

    (146) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 328


state 313

    (147) print-list -> expression .
    (148) print-list -> expression . COMMA print-list

    CLOSE_PAREN     reduce using rule 147 (print-list -> expression .)
    COMMA           shift and go to state 329


state 314

    (149) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 330


state 315

    (191) statement-expression-list -> statement-expression-list COMMA statement-expression .

    COMMA           reduce using rule 191 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    DELIM           reduce using rule 191 (statement-expression-list -> statement-expression-list COMMA statement-expression .)
    CLOSE_PAREN     reduce using rule 191 (statement-expression-list -> statement-expression-list COMMA statement-expression .)


state 316

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad . for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (185) for-condition -> . expression
    (186) for-condition -> . empty
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (205) empty -> .
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    DELIM           reduce using rule 205 (empty -> .)
    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    for-condition                  shift and go to state 331
    additive-expression            shift and go to state 149
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    assignment                     shift and go to state 158
    empty                          shift and go to state 332
    conditional-and-expression     shift and go to state 161
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 333
    parenthesized-expression       shift and go to state 178
    inclusive-or-expression        shift and go to state 151
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172

state 317

    (161) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block
    (162) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block ELSE M_else block
    (163) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if . block ELSE M_else if-statement M_quad
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 334

state 318

    (164) M_if -> empty .

    BLOCK_BEGIN     reduce using rule 164 (M_if -> empty .)


state 319

    (87) object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 335


state 320

    (42) conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .
    (44) inclusive-or-expression -> inclusive-or-expression . BITOR exclusive-or-expression

    LOGAND          reduce using rule 42 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    CONDOP          reduce using rule 42 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    LOGOR           reduce using rule 42 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    COLON           reduce using rule 42 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    COMMA           reduce using rule 42 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    CLOSE_PAREN     reduce using rule 42 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    BLOCK_END       reduce using rule 42 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    DELIM           reduce using rule 42 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    CLOSE_BRACKET   reduce using rule 42 (conditional-and-expression -> conditional-and-expression M_and LOGAND inclusive-or-expression .)
    BITOR           shift and go to state 238


state 321

    (38) conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .
    (42) conditional-and-expression -> conditional-and-expression . M_and LOGAND inclusive-or-expression
    (40) M_and -> . empty
    (205) empty -> .

    CONDOP          reduce using rule 38 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    LOGOR           reduce using rule 38 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    DELIM           reduce using rule 38 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    COMMA           reduce using rule 38 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    CLOSE_PAREN     reduce using rule 38 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    BLOCK_END       reduce using rule 38 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    CLOSE_BRACKET   reduce using rule 38 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    COLON           reduce using rule 38 (conditional-or-expression -> conditional-or-expression M_or LOGOR conditional-and-expression .)
    LOGAND          reduce using rule 205 (empty -> .)

    M_and                          shift and go to state 244
    empty                          shift and go to state 243

state 322

    (36) conditional-expression -> conditional-or-expression CONDOP expression COLON . expression
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    expression                     shift and go to state 336
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    conditional-or-expression      shift and go to state 172
    parenthesized-expression       shift and go to state 178

state 323

    (167) switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN . M_quad switch-block
    (166) M_quad -> . empty
    (205) empty -> .

    BLOCK_BEGIN     reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 337
    empty                          shift and go to state 108

state 324

    (180) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad . expression CLOSE_PAREN DELIM
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    and-expression                 shift and go to state 169
    multiplicative-expression      shift and go to state 171
    conditional-or-expression      shift and go to state 172
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    expression                     shift and go to state 338
    parenthesized-expression       shift and go to state 178

state 325

    (178) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while . block
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 339

state 326

    (179) M_while -> empty .

    BLOCK_BEGIN     reduce using rule 179 (M_while -> empty .)


state 327

    (91) invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 91 (invocation-expression -> IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 328

    (146) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN . DELIM

    DELIM           shift and go to state 340


state 329

    (148) print-list -> expression COMMA . print-list
    (147) print-list -> . expression
    (148) print-list -> . expression COMMA print-list
    (33) expression -> . conditional-expression
    (34) expression -> . assignment
    (35) conditional-expression -> . conditional-or-expression
    (36) conditional-expression -> . conditional-or-expression CONDOP expression COLON expression
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (37) conditional-or-expression -> . conditional-and-expression
    (38) conditional-or-expression -> . conditional-or-expression M_or LOGOR conditional-and-expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET
    (41) conditional-and-expression -> . inclusive-or-expression
    (42) conditional-and-expression -> . conditional-and-expression M_and LOGAND inclusive-or-expression
    (43) inclusive-or-expression -> . exclusive-or-expression
    (44) inclusive-or-expression -> . inclusive-or-expression BITOR exclusive-or-expression
    (45) exclusive-or-expression -> . and-expression
    (46) exclusive-or-expression -> . exclusive-or-expression BITXOR and-expression
    (47) and-expression -> . equality-expression
    (48) and-expression -> . and-expression BITAND equality-expression
    (49) equality-expression -> . relational-expression
    (50) equality-expression -> . equality-expression EQ relational-expression
    (51) equality-expression -> . equality-expression NE relational-expression
    (52) relational-expression -> . shift-expression
    (53) relational-expression -> . relational-expression LT shift-expression
    (54) relational-expression -> . relational-expression GT shift-expression
    (55) relational-expression -> . relational-expression LE shift-expression
    (56) relational-expression -> . relational-expression GE shift-expression
    (57) shift-expression -> . additive-expression
    (58) shift-expression -> . shift-expression LSHIFT additive-expression
    (59) shift-expression -> . shift-expression RSHIFT additive-expression
    (60) additive-expression -> . multiplicative-expression
    (61) additive-expression -> . additive-expression PLUS multiplicative-expression
    (62) additive-expression -> . additive-expression MINUS multiplicative-expression
    (63) multiplicative-expression -> . unary-expression
    (64) multiplicative-expression -> . multiplicative-expression TIMES unary-expression
    (65) multiplicative-expression -> . multiplicative-expression DIV unary-expression
    (66) multiplicative-expression -> . multiplicative-expression MOD unary-expression
    (67) unary-expression -> . primary-expression
    (68) unary-expression -> . PLUS unary-expression
    (69) unary-expression -> . MINUS unary-expression
    (70) unary-expression -> . BITNOT unary-expression
    (71) unary-expression -> . BITCOMP unary-expression
    (72) primary-expression -> . primary-no-array-creation-expression
    (80) primary-no-array-creation-expression -> . literal
    (81) primary-no-array-creation-expression -> . IDENTIFIER
    (82) primary-no-array-creation-expression -> . element-access
    (83) primary-no-array-creation-expression -> . parenthesized-expression
    (84) primary-no-array-creation-expression -> . member-access
    (85) primary-no-array-creation-expression -> . invocation-expression
    (86) primary-no-array-creation-expression -> . object-creation-expression
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST
    (88) parenthesized-expression -> . OPEN_PAREN expression CLOSE_PAREN
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (87) object-creation-expression -> . NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN

    IDENTIFIER      shift and go to state 160
    PLUS            shift and go to state 159
    MINUS           shift and go to state 150
    BITNOT          shift and go to state 173
    BITCOMP         shift and go to state 154
    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153
    OPEN_PAREN      shift and go to state 156
    NEW             shift and go to state 148

    exclusive-or-expression        shift and go to state 144
    member-access                  shift and go to state 145
    relational-expression          shift and go to state 146
    additive-expression            shift and go to state 149
    inclusive-or-expression        shift and go to state 151
    unary-expression               shift and go to state 143
    element-access                 shift and go to state 155
    literal                        shift and go to state 162
    conditional-expression         shift and go to state 157
    conditional-and-expression     shift and go to state 161
    assignment                     shift and go to state 158
    primary-no-array-creation-expression shift and go to state 170
    object-creation-expression     shift and go to state 164
    and-expression                 shift and go to state 169
    equality-expression            shift and go to state 166
    shift-expression               shift and go to state 168
    print-list                     shift and go to state 341
    multiplicative-expression      shift and go to state 171
    conditional-or-expression      shift and go to state 172
    primary-expression             shift and go to state 175
    invocation-expression          shift and go to state 176
    expression                     shift and go to state 313
    parenthesized-expression       shift and go to state 178

state 330

    (149) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN . DELIM

    DELIM           shift and go to state 342


state 331

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition . DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block

    DELIM           shift and go to state 343


state 332

    (186) for-condition -> empty .

    DELIM           reduce using rule 186 (for-condition -> empty .)


state 333

    (185) for-condition -> expression .

    DELIM           reduce using rule 185 (for-condition -> expression .)


state 334

    (161) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .
    (162) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block . ELSE M_else block
    (163) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block . ELSE M_else if-statement M_quad

    IDENTIFIER      reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_BEGIN     reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DELIM           reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONSOLE         reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONST           reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    IF              reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    SWITCH          reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    WHILE           reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    FOR             reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DO              reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BREAK           reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CONTINUE        reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    RETURN          reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    VOID            reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BOOL            reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    INT             reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CHAR            reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    STRING          reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    BLOCK_END       reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    CASE            reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    DEFAULT         reduce using rule 161 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block .)
    ELSE            shift and go to state 344


state 335

    (87) object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .

    TIMES           reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DIV             reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MOD             reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    PLUS            reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    MINUS           reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LSHIFT          reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    RSHIFT          reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LT              reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GT              reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LE              reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    GE              reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    EQ              reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    NE              reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITAND          reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITXOR          reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BITOR           reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGAND          reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CONDOP          reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    LOGOR           reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    DELIM           reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COMMA           reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    CLOSE_BRACKET   reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    BLOCK_END       reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)
    COLON           reduce using rule 87 (object-creation-expression -> NEW class-type OPEN_PAREN argument-list-opt CLOSE_PAREN .)


state 336

    (36) conditional-expression -> conditional-or-expression CONDOP expression COLON expression .

    COMMA           reduce using rule 36 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_PAREN     reduce using rule 36 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    BLOCK_END       reduce using rule 36 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    DELIM           reduce using rule 36 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    COLON           reduce using rule 36 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)
    CLOSE_BRACKET   reduce using rule 36 (conditional-expression -> conditional-or-expression CONDOP expression COLON expression .)


state 337

    (167) switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad . switch-block
    (169) switch-block -> . BLOCK_BEGIN M_bstart switch-sections BLOCK_END

    BLOCK_BEGIN     shift and go to state 345

    switch-block                   shift and go to state 346

state 338

    (180) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression . CLOSE_PAREN DELIM

    CLOSE_PAREN     shift and go to state 347


state 339

    (178) while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .

    IDENTIFIER      reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_BEGIN     reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DELIM           reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONSOLE         reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONST           reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    IF              reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    SWITCH          reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    WHILE           reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    FOR             reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DO              reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BREAK           reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CONTINUE        reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    RETURN          reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    VOID            reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BOOL            reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    INT             reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CHAR            reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    STRING          reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    BLOCK_END       reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    CASE            reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)
    DEFAULT         reduce using rule 178 (while-statement -> WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block .)


state 340

    (146) write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONST           reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    IF              reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    FOR             reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DO              reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    VOID            reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    INT             reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    STRING          reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    CASE            reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 146 (write-statement -> CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM .)


state 341

    (148) print-list -> expression COMMA print-list .

    CLOSE_PAREN     reduce using rule 148 (print-list -> expression COMMA print-list .)


state 342

    (149) read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONST           reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    IF              reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    FOR             reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DO              reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    VOID            reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    INT             reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    STRING          reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    CASE            reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 149 (read-statement -> CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM .)


state 343

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM . M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (166) M_quad -> . empty
    (205) empty -> .

    IDENTIFIER      reduce using rule 205 (empty -> .)
    CLOSE_PAREN     reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 348
    empty                          shift and go to state 108

state 344

    (162) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE . M_else block
    (163) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE . M_else if-statement M_quad
    (165) M_else -> . empty
    (205) empty -> .

    BLOCK_BEGIN     reduce using rule 205 (empty -> .)
    IF              reduce using rule 205 (empty -> .)

    empty                          shift and go to state 350
    M_else                         shift and go to state 349

state 345

    (169) switch-block -> BLOCK_BEGIN . M_bstart switch-sections BLOCK_END
    (130) M_bstart -> . empty
    (205) empty -> .

    CASE            reduce using rule 205 (empty -> .)
    DEFAULT         reduce using rule 205 (empty -> .)

    M_bstart                       shift and go to state 351
    empty                          shift and go to state 124

state 346

    (167) switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .

    IDENTIFIER      reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    BLOCK_BEGIN     reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    DELIM           reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CONSOLE         reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CONST           reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    IF              reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    SWITCH          reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    WHILE           reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    FOR             reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    DO              reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    BREAK           reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CONTINUE        reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    RETURN          reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    VOID            reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    BOOL            reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    INT             reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CHAR            reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    STRING          reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    BLOCK_END       reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    CASE            reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)
    DEFAULT         reduce using rule 167 (switch-statement -> SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block .)


state 347

    (180) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN . DELIM

    DELIM           shift and go to state 352


state 348

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad . for-iterator-opt CLOSE_PAREN M_quad block
    (187) for-iterator-opt -> . for-iterator
    (188) for-iterator-opt -> . empty
    (189) for-iterator -> . statement-expression-list
    (205) empty -> .
    (190) statement-expression-list -> . statement-expression
    (191) statement-expression-list -> . statement-expression-list COMMA statement-expression
    (157) statement-expression -> . invocation-expression
    (158) statement-expression -> . assignment
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    CLOSE_PAREN     reduce using rule 205 (empty -> .)
    IDENTIFIER      shift and go to state 222

    for-iterator-opt               shift and go to state 353
    assignment                     shift and go to state 70
    member-access                  shift and go to state 55
    element-access                 shift and go to state 66
    invocation-expression          shift and go to state 79
    statement-expression           shift and go to state 220
    empty                          shift and go to state 356
    for-iterator                   shift and go to state 354
    statement-expression-list      shift and go to state 355

state 349

    (162) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else . block
    (163) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else . if-statement M_quad
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (161) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (162) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad

    BLOCK_BEGIN     shift and go to state 57
    IF              shift and go to state 84

    if-statement                   shift and go to state 357
    block                          shift and go to state 358

state 350

    (165) M_else -> empty .

    BLOCK_BEGIN     reduce using rule 165 (M_else -> empty .)
    IF              reduce using rule 165 (M_else -> empty .)


state 351

    (169) switch-block -> BLOCK_BEGIN M_bstart . switch-sections BLOCK_END
    (170) switch-sections -> . switch-section
    (171) switch-sections -> . switch-sections switch-section
    (172) switch-section -> . switch-label M_quad statement-list
    (173) switch-label -> . CASE literal COLON
    (174) switch-label -> . DEFAULT COLON

    CASE            shift and go to state 359
    DEFAULT         shift and go to state 360

    switch-section                 shift and go to state 361
    switch-label                   shift and go to state 362
    switch-sections                shift and go to state 363

state 352

    (180) do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .

    IDENTIFIER      reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_BEGIN     reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DELIM           reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONSOLE         reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONST           reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    IF              reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    SWITCH          reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    WHILE           reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    FOR             reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DO              reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BREAK           reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CONTINUE        reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    RETURN          reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    VOID            reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BOOL            reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    INT             reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CHAR            reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    STRING          reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    BLOCK_END       reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    CASE            reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)
    DEFAULT         reduce using rule 180 (do-statement -> DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM .)


state 353

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt . CLOSE_PAREN M_quad block

    CLOSE_PAREN     shift and go to state 364


state 354

    (187) for-iterator-opt -> for-iterator .

    CLOSE_PAREN     reduce using rule 187 (for-iterator-opt -> for-iterator .)


state 355

    (189) for-iterator -> statement-expression-list .
    (191) statement-expression-list -> statement-expression-list . COMMA statement-expression

    CLOSE_PAREN     reduce using rule 189 (for-iterator -> statement-expression-list .)
    COMMA           shift and go to state 279


state 356

    (188) for-iterator-opt -> empty .

    CLOSE_PAREN     reduce using rule 188 (for-iterator-opt -> empty .)


state 357

    (163) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement . M_quad
    (166) M_quad -> . empty
    (205) empty -> .

    IDENTIFIER      reduce using rule 205 (empty -> .)
    BLOCK_BEGIN     reduce using rule 205 (empty -> .)
    DELIM           reduce using rule 205 (empty -> .)
    CONSOLE         reduce using rule 205 (empty -> .)
    CONST           reduce using rule 205 (empty -> .)
    IF              reduce using rule 205 (empty -> .)
    SWITCH          reduce using rule 205 (empty -> .)
    WHILE           reduce using rule 205 (empty -> .)
    FOR             reduce using rule 205 (empty -> .)
    DO              reduce using rule 205 (empty -> .)
    BREAK           reduce using rule 205 (empty -> .)
    CONTINUE        reduce using rule 205 (empty -> .)
    RETURN          reduce using rule 205 (empty -> .)
    VOID            reduce using rule 205 (empty -> .)
    BOOL            reduce using rule 205 (empty -> .)
    INT             reduce using rule 205 (empty -> .)
    CHAR            reduce using rule 205 (empty -> .)
    STRING          reduce using rule 205 (empty -> .)
    BLOCK_END       reduce using rule 205 (empty -> .)
    CASE            reduce using rule 205 (empty -> .)
    DEFAULT         reduce using rule 205 (empty -> .)

    empty                          shift and go to state 108
    M_quad                         shift and go to state 365

state 358

    (162) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .

    IDENTIFIER      reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_BEGIN     reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DELIM           reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONSOLE         reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONST           reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    IF              reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    SWITCH          reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    WHILE           reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    FOR             reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DO              reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BREAK           reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CONTINUE        reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    RETURN          reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    VOID            reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BOOL            reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    INT             reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CHAR            reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    STRING          reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    BLOCK_END       reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    CASE            reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)
    DEFAULT         reduce using rule 162 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block .)


state 359

    (173) switch-label -> CASE . literal COLON
    (199) literal -> . ICONST
    (200) literal -> . DCONST
    (201) literal -> . TRUE
    (202) literal -> . FALSE
    (203) literal -> . CCONST
    (204) literal -> . SCONST

    ICONST          shift and go to state 163
    DCONST          shift and go to state 147
    TRUE            shift and go to state 167
    FALSE           shift and go to state 165
    CCONST          shift and go to state 174
    SCONST          shift and go to state 153

    literal                        shift and go to state 366

state 360

    (174) switch-label -> DEFAULT . COLON

    COLON           shift and go to state 367


state 361

    (170) switch-sections -> switch-section .

    BLOCK_END       reduce using rule 170 (switch-sections -> switch-section .)
    CASE            reduce using rule 170 (switch-sections -> switch-section .)
    DEFAULT         reduce using rule 170 (switch-sections -> switch-section .)


state 362

    (172) switch-section -> switch-label . M_quad statement-list
    (166) M_quad -> . empty
    (205) empty -> .

    IDENTIFIER      reduce using rule 205 (empty -> .)
    BLOCK_BEGIN     reduce using rule 205 (empty -> .)
    DELIM           reduce using rule 205 (empty -> .)
    CONSOLE         reduce using rule 205 (empty -> .)
    CONST           reduce using rule 205 (empty -> .)
    IF              reduce using rule 205 (empty -> .)
    SWITCH          reduce using rule 205 (empty -> .)
    WHILE           reduce using rule 205 (empty -> .)
    FOR             reduce using rule 205 (empty -> .)
    DO              reduce using rule 205 (empty -> .)
    BREAK           reduce using rule 205 (empty -> .)
    CONTINUE        reduce using rule 205 (empty -> .)
    RETURN          reduce using rule 205 (empty -> .)
    VOID            reduce using rule 205 (empty -> .)
    BOOL            reduce using rule 205 (empty -> .)
    INT             reduce using rule 205 (empty -> .)
    CHAR            reduce using rule 205 (empty -> .)
    STRING          reduce using rule 205 (empty -> .)

    empty                          shift and go to state 108
    M_quad                         shift and go to state 368

state 363

    (169) switch-block -> BLOCK_BEGIN M_bstart switch-sections . BLOCK_END
    (171) switch-sections -> switch-sections . switch-section
    (172) switch-section -> . switch-label M_quad statement-list
    (173) switch-label -> . CASE literal COLON
    (174) switch-label -> . DEFAULT COLON

    BLOCK_END       shift and go to state 369
    CASE            shift and go to state 359
    DEFAULT         shift and go to state 360

    switch-section                 shift and go to state 370
    switch-label                   shift and go to state 362

state 364

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN . M_quad block
    (166) M_quad -> . empty
    (205) empty -> .

    BLOCK_BEGIN     reduce using rule 205 (empty -> .)

    M_quad                         shift and go to state 371
    empty                          shift and go to state 108

state 365

    (163) if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .

    IDENTIFIER      reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BLOCK_BEGIN     reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DELIM           reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CONSOLE         reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CONST           reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    IF              reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    SWITCH          reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    WHILE           reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    FOR             reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DO              reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BREAK           reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CONTINUE        reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    RETURN          reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    VOID            reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BOOL            reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    INT             reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CHAR            reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    STRING          reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    BLOCK_END       reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    CASE            reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)
    DEFAULT         reduce using rule 163 (if-statement -> IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad .)


state 366

    (173) switch-label -> CASE literal . COLON

    COLON           shift and go to state 372


state 367

    (174) switch-label -> DEFAULT COLON .

    IDENTIFIER      reduce using rule 174 (switch-label -> DEFAULT COLON .)
    BLOCK_BEGIN     reduce using rule 174 (switch-label -> DEFAULT COLON .)
    DELIM           reduce using rule 174 (switch-label -> DEFAULT COLON .)
    CONSOLE         reduce using rule 174 (switch-label -> DEFAULT COLON .)
    CONST           reduce using rule 174 (switch-label -> DEFAULT COLON .)
    IF              reduce using rule 174 (switch-label -> DEFAULT COLON .)
    SWITCH          reduce using rule 174 (switch-label -> DEFAULT COLON .)
    WHILE           reduce using rule 174 (switch-label -> DEFAULT COLON .)
    FOR             reduce using rule 174 (switch-label -> DEFAULT COLON .)
    DO              reduce using rule 174 (switch-label -> DEFAULT COLON .)
    BREAK           reduce using rule 174 (switch-label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 174 (switch-label -> DEFAULT COLON .)
    RETURN          reduce using rule 174 (switch-label -> DEFAULT COLON .)
    VOID            reduce using rule 174 (switch-label -> DEFAULT COLON .)
    BOOL            reduce using rule 174 (switch-label -> DEFAULT COLON .)
    INT             reduce using rule 174 (switch-label -> DEFAULT COLON .)
    CHAR            reduce using rule 174 (switch-label -> DEFAULT COLON .)
    STRING          reduce using rule 174 (switch-label -> DEFAULT COLON .)


state 368

    (172) switch-section -> switch-label M_quad . statement-list
    (133) statement-list -> . statement
    (134) statement-list -> . statement-list statement
    (135) statement -> . labeled-statement
    (136) statement -> . declaration-statement
    (137) statement -> . block
    (138) statement -> . empty-statement
    (139) statement -> . expression-statement
    (140) statement -> . selection-statement
    (141) statement -> . iteration-statement
    (142) statement -> . jump-statement
    (143) statement -> . write-statement
    (144) statement -> . read-statement
    (145) statement -> . method-declaration
    (150) labeled-statement -> . IDENTIFIER COLON statement
    (151) declaration-statement -> . local-variable-declaration DELIM
    (152) declaration-statement -> . local-constant-declaration DELIM
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (155) empty-statement -> . DELIM
    (156) expression-statement -> . statement-expression DELIM
    (159) selection-statement -> . if-statement
    (160) selection-statement -> . switch-statement
    (175) iteration-statement -> . while-statement M_quad
    (176) iteration-statement -> . for-statement M_quad
    (177) iteration-statement -> . do-statement M_quad
    (192) jump-statement -> . break-statement
    (193) jump-statement -> . continue-statement
    (194) jump-statement -> . return-statement
    (146) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (149) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (118) method-declaration -> . method-header method-body
    (153) local-variable-declaration -> . type variable-declarators
    (154) local-constant-declaration -> . CONST simple-type constant-declarators
    (157) statement-expression -> . invocation-expression
    (158) statement-expression -> . assignment
    (161) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (162) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (167) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (178) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (181) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (180) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (195) break-statement -> . BREAK DELIM
    (196) continue-statement -> . CONTINUE DELIM
    (197) return-statement -> . RETURN expression DELIM
    (198) return-statement -> . RETURN DELIM
    (119) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    IDENTIFIER      shift and go to state 72
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 76
    CONST           shift and go to state 62
    IF              shift and go to state 84
    SWITCH          shift and go to state 94
    WHILE           shift and go to state 58
    FOR             shift and go to state 77
    DO              shift and go to state 52
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 61
    RETURN          shift and go to state 85
    VOID            shift and go to state 17
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21

    return-statement               shift and go to state 53
    method-header                  shift and go to state 16
    write-statement                shift and go to state 54
    member-access                  shift and go to state 55
    selection-statement            shift and go to state 56
    empty-statement                shift and go to state 59
    expression-statement           shift and go to state 63
    break-statement                shift and go to state 64
    method-declaration             shift and go to state 67
    element-access                 shift and go to state 66
    statement-expression           shift and go to state 83
    local-constant-declaration     shift and go to state 68
    statement                      shift and go to state 69
    assignment                     shift and go to state 70
    for-statement                  shift and go to state 71
    type                           shift and go to state 73
    read-statement                 shift and go to state 74
    do-statement                   shift and go to state 75
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 79
    labeled-statement              shift and go to state 80
    declaration-statement          shift and go to state 81
    switch-statement               shift and go to state 82
    jump-statement                 shift and go to state 87
    iteration-statement            shift and go to state 86
    local-variable-declaration     shift and go to state 88
    if-statement                   shift and go to state 90
    statement-list                 shift and go to state 373
    class-type                     shift and go to state 34
    while-statement                shift and go to state 93
    simple-type                    shift and go to state 19
    block                          shift and go to state 95

state 369

    (169) switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .

    IDENTIFIER      reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    DELIM           reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CONSOLE         reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CONST           reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    IF              reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    SWITCH          reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    WHILE           reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    FOR             reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    DO              reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    BREAK           reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CONTINUE        reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    RETURN          reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    VOID            reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    BOOL            reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    INT             reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CHAR            reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    STRING          reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    BLOCK_END       reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    CASE            reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)
    DEFAULT         reduce using rule 169 (switch-block -> BLOCK_BEGIN M_bstart switch-sections BLOCK_END .)


state 370

    (171) switch-sections -> switch-sections switch-section .

    BLOCK_END       reduce using rule 171 (switch-sections -> switch-sections switch-section .)
    CASE            reduce using rule 171 (switch-sections -> switch-sections switch-section .)
    DEFAULT         reduce using rule 171 (switch-sections -> switch-sections switch-section .)


state 371

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad . block
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 57

    block                          shift and go to state 374

state 372

    (173) switch-label -> CASE literal COLON .

    IDENTIFIER      reduce using rule 173 (switch-label -> CASE literal COLON .)
    BLOCK_BEGIN     reduce using rule 173 (switch-label -> CASE literal COLON .)
    DELIM           reduce using rule 173 (switch-label -> CASE literal COLON .)
    CONSOLE         reduce using rule 173 (switch-label -> CASE literal COLON .)
    CONST           reduce using rule 173 (switch-label -> CASE literal COLON .)
    IF              reduce using rule 173 (switch-label -> CASE literal COLON .)
    SWITCH          reduce using rule 173 (switch-label -> CASE literal COLON .)
    WHILE           reduce using rule 173 (switch-label -> CASE literal COLON .)
    FOR             reduce using rule 173 (switch-label -> CASE literal COLON .)
    DO              reduce using rule 173 (switch-label -> CASE literal COLON .)
    BREAK           reduce using rule 173 (switch-label -> CASE literal COLON .)
    CONTINUE        reduce using rule 173 (switch-label -> CASE literal COLON .)
    RETURN          reduce using rule 173 (switch-label -> CASE literal COLON .)
    VOID            reduce using rule 173 (switch-label -> CASE literal COLON .)
    BOOL            reduce using rule 173 (switch-label -> CASE literal COLON .)
    INT             reduce using rule 173 (switch-label -> CASE literal COLON .)
    CHAR            reduce using rule 173 (switch-label -> CASE literal COLON .)
    STRING          reduce using rule 173 (switch-label -> CASE literal COLON .)


state 373

    (172) switch-section -> switch-label M_quad statement-list .
    (134) statement-list -> statement-list . statement
    (135) statement -> . labeled-statement
    (136) statement -> . declaration-statement
    (137) statement -> . block
    (138) statement -> . empty-statement
    (139) statement -> . expression-statement
    (140) statement -> . selection-statement
    (141) statement -> . iteration-statement
    (142) statement -> . jump-statement
    (143) statement -> . write-statement
    (144) statement -> . read-statement
    (145) statement -> . method-declaration
    (150) labeled-statement -> . IDENTIFIER COLON statement
    (151) declaration-statement -> . local-variable-declaration DELIM
    (152) declaration-statement -> . local-constant-declaration DELIM
    (129) block -> . BLOCK_BEGIN M_bstart statement-list-opt BLOCK_END
    (155) empty-statement -> . DELIM
    (156) expression-statement -> . statement-expression DELIM
    (159) selection-statement -> . if-statement
    (160) selection-statement -> . switch-statement
    (175) iteration-statement -> . while-statement M_quad
    (176) iteration-statement -> . for-statement M_quad
    (177) iteration-statement -> . do-statement M_quad
    (192) jump-statement -> . break-statement
    (193) jump-statement -> . continue-statement
    (194) jump-statement -> . return-statement
    (146) write-statement -> . CONSOLE DOT WRITELINE OPEN_PAREN print-list CLOSE_PAREN DELIM
    (149) read-statement -> . CONSOLE DOT READLINE OPEN_PAREN IDENTIFIER CLOSE_PAREN DELIM
    (118) method-declaration -> . method-header method-body
    (153) local-variable-declaration -> . type variable-declarators
    (154) local-constant-declaration -> . CONST simple-type constant-declarators
    (157) statement-expression -> . invocation-expression
    (158) statement-expression -> . assignment
    (161) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block
    (162) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else block
    (163) if-statement -> . IF OPEN_PAREN expression CLOSE_PAREN M_if block ELSE M_else if-statement M_quad
    (167) switch-statement -> . SWITCH OPEN_PAREN expression M_switch CLOSE_PAREN M_quad switch-block
    (178) while-statement -> . WHILE M_quad OPEN_PAREN expression CLOSE_PAREN M_while block
    (181) for-statement -> . FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block
    (180) do-statement -> . DO M_quad block WHILE OPEN_PAREN M_quad expression CLOSE_PAREN DELIM
    (195) break-statement -> . BREAK DELIM
    (196) continue-statement -> . CONTINUE DELIM
    (197) return-statement -> . RETURN expression DELIM
    (198) return-statement -> . RETURN DELIM
    (119) method-header -> . type IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (120) method-header -> . VOID IDENTIFIER OPEN_PAREN formal-parameter-list-opt CLOSE_PAREN
    (22) type -> . simple-type
    (23) type -> . class-type
    (24) type -> . array-type
    (90) invocation-expression -> . IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (91) invocation-expression -> . IDENTIFIER DOT IDENTIFIER OPEN_PAREN argument-list-opt CLOSE_PAREN
    (96) assignment -> . IDENTIFIER assignment-operator expression
    (97) assignment -> . member-access assignment-operator expression
    (98) assignment -> . element-access assignment-operator expression
    (25) simple-type -> . BOOL
    (26) simple-type -> . INT
    (27) simple-type -> . CHAR
    (28) simple-type -> . STRING
    (11) class-type -> . IDENTIFIER
    (29) array-type -> . simple-type OPEN_BRACKET ICONST CLOSE_BRACKET
    (89) member-access -> . IDENTIFIER DOT IDENTIFIER
    (94) element-access -> . IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
    (95) element-access -> . member-access OPEN_BRACKET expression CLOSE_BRACKET

    BLOCK_END       reduce using rule 172 (switch-section -> switch-label M_quad statement-list .)
    CASE            reduce using rule 172 (switch-section -> switch-label M_quad statement-list .)
    DEFAULT         reduce using rule 172 (switch-section -> switch-label M_quad statement-list .)
    IDENTIFIER      shift and go to state 72
    BLOCK_BEGIN     shift and go to state 57
    DELIM           shift and go to state 65
    CONSOLE         shift and go to state 76
    CONST           shift and go to state 62
    IF              shift and go to state 84
    SWITCH          shift and go to state 94
    WHILE           shift and go to state 58
    FOR             shift and go to state 77
    DO              shift and go to state 52
    BREAK           shift and go to state 89
    CONTINUE        shift and go to state 61
    RETURN          shift and go to state 85
    VOID            shift and go to state 17
    BOOL            shift and go to state 33
    INT             shift and go to state 32
    CHAR            shift and go to state 18
    STRING          shift and go to state 21

    return-statement               shift and go to state 53
    method-header                  shift and go to state 16
    write-statement                shift and go to state 54
    member-access                  shift and go to state 55
    selection-statement            shift and go to state 56
    empty-statement                shift and go to state 59
    expression-statement           shift and go to state 63
    break-statement                shift and go to state 64
    method-declaration             shift and go to state 67
    element-access                 shift and go to state 66
    statement-expression           shift and go to state 83
    local-constant-declaration     shift and go to state 68
    statement                      shift and go to state 181
    assignment                     shift and go to state 70
    for-statement                  shift and go to state 71
    type                           shift and go to state 73
    read-statement                 shift and go to state 74
    do-statement                   shift and go to state 75
    array-type                     shift and go to state 28
    continue-statement             shift and go to state 78
    invocation-expression          shift and go to state 79
    labeled-statement              shift and go to state 80
    declaration-statement          shift and go to state 81
    switch-statement               shift and go to state 82
    jump-statement                 shift and go to state 87
    iteration-statement            shift and go to state 86
    local-variable-declaration     shift and go to state 88
    if-statement                   shift and go to state 90
    class-type                     shift and go to state 34
    while-statement                shift and go to state 93
    simple-type                    shift and go to state 19
    block                          shift and go to state 95

state 374

    (181) for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .

    IDENTIFIER      reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_BEGIN     reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DELIM           reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONSOLE         reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONST           reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    IF              reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    SWITCH          reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    WHILE           reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    FOR             reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DO              reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BREAK           reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CONTINUE        reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    RETURN          reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    VOID            reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BOOL            reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    INT             reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CHAR            reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    STRING          reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    BLOCK_END       reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    CASE            reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)
    DEFAULT         reduce using rule 181 (for-statement -> FOR OPEN_PAREN for-initializer-opt DELIM M_quad for-condition DELIM M_quad for-iterator-opt CLOSE_PAREN M_quad block .)

